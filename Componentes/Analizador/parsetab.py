
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIG BOOL CHAR CHARACTER COLON COMMA DIVIDE DOT DOUBLE_COLON DOUBLE_QUOTATION_MARK ELSE EQ EXCLAMATION F32 F64 FALSE FLOAT FN FOR FROM GEQ I128 I16 I32 I64 I8 IDENTIFIER IF IMPL IN INTD INTEGER IO ISIZE LCORCH LEFTARROW LEQ LET LLLAVE LPAREN MAIN MATCH MINUS MOD MUT NEQ NOT OR PLUS PRINTLN QUOTATION_MARK RAND RCORCH READLINE REFERENCE RETURN RIGHTARROW RLLAVE RPAREN SELF SEMICOLON STD STDIN STR STRING STRUCT TIMES TRUE U128 U16 U32 U64 U8 USIZE WHILEcodigoRust : functions fnmain functions\n                | functions fnmain\n                | fnmain functions\n                | fnmain\n\n  \n  \n  functions : funcion\n                | funcion functions\n  \n  programa : sentencias\n            | sentencias programa\n\n  asignacion_variable : LET IDENTIFIER ASIG valor\n                  | LET MUT IDENTIFIER ASIG valor\n                  | LET IDENTIFIER COLON asignacion\n                  | LET MUT IDENTIFIER COLON asignacion\n\n  declaracion_variable : LET IDENTIFIER\n                          | LET MUT IDENTIFIER \n                          | LET IDENTIFIER COLON asig_data_type\n                          | LET MUT IDENTIFIER COLON asig_data_type\n  asignacion : string_asignacion\n                | numero_asignacion\n                | boolean_asignacion\n                | lista_asignacion\n                | tupla_asignacion\n  string_asignacion : REFERENCE STR ASIG STRINGnumero_asignacion  : signed_integer ASIG INTEGER\n                        | signed_integer ASIG MINUS INTEGER\n                        | unsigned_integer ASIG INTEGER\n                        | float_type ASIG FLOAT\n                        | float_type ASIG MINUS FLOAT\n  boolean_asignacion : BOOL ASIG TRUE\n                        | BOOL ASIG FALSE\n  lista_asignacion : list_type ASIG arreglostupla_asignacion : tuple_type ASIG tuplascomparacion : valor EQ valor\n                | valor NEQ valor\n                | valor GEQ valor\n                | valor LEQ valor\n                | valor RIGHTARROW valor\n                | valor LEFTARROW valor\n  \n  valor : INTEGER \n          | FLOAT\n          | IDENTIFIER\n          | operacion\n          | indexacion\n          | arreglos\n          | STRING\n          | booleanos\n  \n  \n  booleanos : TRUE\n            | FALSE\n  vacio :\n  sentencias : asignacion_variable SEMICOLON\n              | declaracion_variable SEMICOLON\n              | impresion SEMICOLON\n              | ingreso_datos SEMICOLON\n              | arreglos SEMICOLON\n              | control_structure \n              | llamada SEMICOLON\n  \n  impresion : PRINTLN EXCLAMATION LPAREN valor RPAREN\n            | PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN\n  \n  \n  \n  funcion : FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE\n          | FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE\n          | FN IDENTIFIER LPAREN parameters RPAREN MINUS RIGHTARROW data_type LLLAVE programa retorno RLLAVE\n          | FN IDENTIFIER LPAREN RPAREN MINUS RIGHTARROW data_type LLLAVE programa retorno RLLAVE\n  \n  \n  retorno : RETURN valor SEMICOLON\n  \n  \n  \n  parameters : IDENTIFIER COLON asig_data_type\n              | IDENTIFIER COLON asig_data_type COMMA parameters\n              | vacio\n  \n  ingreso_datos : STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN\n\n  \n  asig_data_type : data_type\n                  | list_type\n                  | tuple_type\n  list_type : LCORCH some_data_type RCORCHtuple_type : LPAREN some_data_type RPAREN\n  data_type : CHAR\n              | REFERENCE STR\n              | signed_integer\n              | unsigned_integer\n              | float_type\n              | BOOL\n  \n  signed_integer : I8\n                | I16\n                | I32\n                | I64\n                | I128\n                | ISIZE\n  \n  unsigned_integer : U8\n                  | U16\n                  | U32\n                  | U64\n                  | U128\n                  | USIZE\n  \n  float_type : F32\n            | F64\n  \n  some_data_type : data_type\n                | data_type COMMA some_data_type\n  \n  control_structure : condicional\n  \n  arreglos : LCORCH valores RCORCH\n\n  tuplas : LPAREN valores RPAREN\n  valores : valor\n          | valor COMMA valores\n\n  \n  conector : AND \n            | OR\n  proposicion : comparacion conector proposicion \n              | comparacion\n  condicional : IF comparacion LLLAVE programa RLLAVE \n                | IF proposicion LLLAVE programa RLLAVE\n  numeric : INTEGER\n              | FLOAT\n              | IDENTIFIER\n  cadena : STRING\n            | IDENTIFIER\n  operacion : numeric PLUS numeric\n              | numeric MINUS numeric\n              | numeric TIMES numeric\n              | numeric DIVIDE numeric\n              | numeric MOD numeric \n              | numeric INTD numeric\n              | cadena PLUS cadena\n  indexacion : IDENTIFIER LCORCH INTEGER RCORCH\n\n  llamada : IDENTIFIER LPAREN valores RPAREN\n             | IDENTIFIER LPAREN RPAREN \n  \n  fnmain : FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE\n  '
    
_lr_action_items = {'FN':([0,2,3,4,6,10,72,109,143,226,234,],[5,7,9,9,9,-6,-120,-59,-58,-61,-60,]),'$end':([1,3,4,6,8,10,13,72,109,143,226,234,],[0,-4,-5,-2,-3,-6,-1,-120,-59,-58,-61,-60,]),'MAIN':([5,7,],[11,11,]),'IDENTIFIER':([5,9,15,21,24,27,33,35,39,40,41,68,74,75,76,77,78,79,81,82,102,111,116,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,145,161,191,204,207,208,211,214,242,],[12,12,17,36,36,36,-54,80,89,-94,89,36,-49,-50,-51,-52,-53,-55,113,89,17,89,89,89,171,171,171,171,171,171,179,36,89,-99,-100,36,89,89,89,89,89,89,36,89,36,89,-103,-104,89,89,243,]),'LPAREN':([11,12,22,36,83,112,162,194,224,239,],[14,15,53,82,116,53,53,214,233,240,]),'RPAREN':([14,15,18,20,42,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,82,86,87,88,89,90,91,92,93,94,97,98,102,103,105,106,114,118,139,140,142,164,166,168,169,170,171,172,173,174,175,176,177,178,179,190,206,223,228,233,243,],[16,19,23,-65,-63,-67,-68,-69,-72,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,115,-97,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-73,-92,142,163,-95,-64,-70,-71,203,-98,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-93,-117,232,236,237,244,]),'LLLAVE':([16,19,23,46,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,87,88,89,90,91,92,93,94,97,98,99,100,103,110,118,144,168,169,170,171,172,173,174,175,176,177,178,179,181,182,184,185,186,187,188,189,206,],[21,24,68,-72,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,128,132,-73,145,-95,191,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-102,-101,-32,-33,-34,-35,-36,-37,-117,]),'COLON':([17,80,113,],[22,112,162,]),'MINUS':([19,23,87,88,89,95,196,198,],[25,69,-105,-106,-107,122,217,220,]),'LET':([21,24,27,33,40,68,74,75,76,77,78,79,128,132,145,191,207,208,],[35,35,35,-54,-94,35,-49,-50,-51,-52,-53,-55,35,35,35,35,-103,-104,]),'PRINTLN':([21,24,27,33,40,68,74,75,76,77,78,79,128,132,145,191,207,208,],[37,37,37,-54,-94,37,-49,-50,-51,-52,-53,-55,37,37,37,37,-103,-104,]),'STD':([21,24,27,33,40,68,74,75,76,77,78,79,128,132,145,191,207,208,],[38,38,38,-54,-94,38,-49,-50,-51,-52,-53,-55,38,38,38,38,-103,-104,]),'LCORCH':([21,22,24,27,33,39,40,41,68,74,75,76,77,78,79,82,89,111,112,116,119,128,129,130,131,132,133,134,135,136,137,138,145,161,162,191,193,204,207,208,211,214,],[39,52,39,39,-54,39,-94,39,39,-49,-50,-51,-52,-53,-55,39,120,39,52,39,39,39,39,-99,-100,39,39,39,39,39,39,39,39,39,52,39,39,39,-103,-104,39,39,]),'IF':([21,24,27,33,40,68,74,75,76,77,78,79,128,132,145,191,207,208,],[41,41,41,-54,-94,41,-49,-50,-51,-52,-53,-55,41,41,41,41,-103,-104,]),'CHAR':([22,52,53,71,108,112,141,162,],[46,46,46,46,46,46,46,46,]),'REFERENCE':([22,52,53,71,108,112,141,162,240,],[47,47,47,47,47,156,47,156,241,]),'BOOL':([22,52,53,71,108,112,141,162,],[51,51,51,51,51,160,51,160,]),'I8':([22,52,53,71,108,112,141,162,],[54,54,54,54,54,54,54,54,]),'I16':([22,52,53,71,108,112,141,162,],[55,55,55,55,55,55,55,55,]),'I32':([22,52,53,71,108,112,141,162,],[56,56,56,56,56,56,56,56,]),'I64':([22,52,53,71,108,112,141,162,],[57,57,57,57,57,57,57,57,]),'I128':([22,52,53,71,108,112,141,162,],[58,58,58,58,58,58,58,58,]),'ISIZE':([22,52,53,71,108,112,141,162,],[59,59,59,59,59,59,59,59,]),'U8':([22,52,53,71,108,112,141,162,],[60,60,60,60,60,60,60,60,]),'U16':([22,52,53,71,108,112,141,162,],[61,61,61,61,61,61,61,61,]),'U32':([22,52,53,71,108,112,141,162,],[62,62,62,62,62,62,62,62,]),'U64':([22,52,53,71,108,112,141,162,],[63,63,63,63,63,63,63,63,]),'U128':([22,52,53,71,108,112,141,162,],[64,64,64,64,64,64,64,64,]),'USIZE':([22,52,53,71,108,112,141,162,],[65,65,65,65,65,65,65,65,]),'F32':([22,52,53,71,108,112,141,162,],[66,66,66,66,66,66,66,66,]),'F64':([22,52,53,71,108,112,141,162,],[67,67,67,67,67,67,67,67,]),'RIGHTARROW':([25,69,87,88,89,90,91,92,93,94,97,98,101,118,168,169,170,171,172,173,174,175,176,177,178,179,206,],[71,108,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,137,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'RLLAVE':([26,27,33,40,70,73,74,75,76,77,78,79,107,180,183,207,208,210,225,235,],[72,-7,-54,-94,109,-8,-49,-50,-51,-52,-53,-55,143,207,208,-103,-104,226,234,-62,]),'RETURN':([27,33,40,73,74,75,76,77,78,79,192,207,208,209,],[-7,-54,-94,-8,-49,-50,-51,-52,-53,-55,211,-103,-104,211,]),'SEMICOLON':([28,29,30,31,32,34,43,46,54,55,56,57,58,59,60,61,62,63,64,65,66,67,80,87,88,89,90,91,92,93,94,97,98,113,115,118,140,142,146,147,148,149,150,151,152,153,154,155,157,158,159,160,163,168,169,170,171,172,173,174,175,176,177,178,179,195,200,201,202,203,206,212,213,216,218,219,221,222,227,229,230,231,232,236,244,],[74,75,76,77,78,79,-67,-72,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-13,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-14,-119,-95,-70,-71,-9,-11,-15,-17,-18,-19,-20,-21,-68,-69,-74,-75,-76,-77,-118,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-73,-10,-12,-16,-56,-117,-30,-31,-23,-25,-26,-28,-29,235,-22,-24,-27,-57,-96,-66,]),'MUT':([35,241,],[81,242,]),'EXCLAMATION':([37,],[83,]),'DOUBLE_COLON':([38,117,],[84,165,]),'INTEGER':([39,41,82,111,116,119,120,121,122,123,124,125,126,129,130,131,133,134,135,136,137,138,161,196,197,204,211,214,217,],[87,87,87,87,87,87,167,169,169,169,169,169,169,87,-99,-100,87,87,87,87,87,87,87,216,218,87,87,87,230,]),'FLOAT':([39,41,82,111,116,119,121,122,123,124,125,126,129,130,131,133,134,135,136,137,138,161,198,204,211,214,220,],[88,88,88,88,88,88,170,170,170,170,170,170,88,-99,-100,88,88,88,88,88,88,88,219,88,88,88,231,]),'STRING':([39,41,82,111,116,119,127,129,130,131,133,134,135,136,137,138,161,204,211,214,215,],[93,93,93,93,93,93,178,93,-99,-100,93,93,93,93,93,93,93,93,93,93,229,]),'TRUE':([39,41,82,111,116,119,129,130,131,133,134,135,136,137,138,161,199,204,211,214,],[97,97,97,97,97,97,97,-99,-100,97,97,97,97,97,97,97,221,97,97,97,]),'FALSE':([39,41,82,111,116,119,129,130,131,133,134,135,136,137,138,161,199,204,211,214,],[98,98,98,98,98,98,98,-99,-100,98,98,98,98,98,98,98,222,98,98,98,]),'COMMA':([42,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,86,87,88,89,90,91,92,93,94,97,98,103,105,118,140,142,164,168,169,170,171,172,173,174,175,176,177,178,179,206,],[102,-67,-68,-69,-72,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,119,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-73,141,-95,-70,-71,204,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'RCORCH':([46,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,85,86,87,88,89,90,91,92,93,94,97,98,103,104,105,118,166,167,168,169,170,171,172,173,174,175,176,177,178,179,190,206,],[-72,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,118,-97,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-73,140,-92,-95,-98,206,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-93,-117,]),'STR':([47,156,],[103,195,]),'ASIG':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,80,113,140,142,154,155,157,158,159,160,195,],[-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,111,161,-70,-71,193,194,196,197,198,199,215,]),'IO':([84,],[117,]),'EQ':([87,88,89,90,91,92,93,94,97,98,101,118,168,169,170,171,172,173,174,175,176,177,178,179,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,133,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'NEQ':([87,88,89,90,91,92,93,94,97,98,101,118,168,169,170,171,172,173,174,175,176,177,178,179,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,134,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'GEQ':([87,88,89,90,91,92,93,94,97,98,101,118,168,169,170,171,172,173,174,175,176,177,178,179,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,135,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'LEQ':([87,88,89,90,91,92,93,94,97,98,101,118,168,169,170,171,172,173,174,175,176,177,178,179,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,136,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'LEFTARROW':([87,88,89,90,91,92,93,94,97,98,101,118,168,169,170,171,172,173,174,175,176,177,178,179,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,138,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,-117,]),'AND':([87,88,89,90,91,92,93,94,97,98,99,118,168,169,170,171,172,173,174,175,176,177,178,179,181,184,185,186,187,188,189,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,130,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,130,-32,-33,-34,-35,-36,-37,-117,]),'OR':([87,88,89,90,91,92,93,94,97,98,99,118,168,169,170,171,172,173,174,175,176,177,178,179,181,184,185,186,187,188,189,206,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,131,-95,-110,-105,-106,-107,-111,-112,-113,-114,-115,-116,-108,-109,131,-32,-33,-34,-35,-36,-37,-117,]),'PLUS':([87,88,89,93,95,96,],[-105,-106,-107,-108,121,127,]),'TIMES':([87,88,89,95,],[-105,-106,-107,123,]),'DIVIDE':([87,88,89,95,],[-105,-106,-107,124,]),'MOD':([87,88,89,95,],[-105,-106,-107,125,]),'INTD':([87,88,89,95,],[-105,-106,-107,126,]),'DOT':([165,237,],[205,238,]),'STDIN':([205,],[224,]),'READLINE':([238,],[239,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigoRust':([0,],[1,]),'functions':([0,3,4,6,],[2,8,10,13,]),'fnmain':([0,2,],[3,6,]),'funcion':([0,3,4,6,],[4,4,4,4,]),'parameters':([15,102,],[18,139,]),'vacio':([15,102,],[20,20,]),'programa':([21,24,27,68,128,132,145,191,],[26,70,73,107,180,183,192,209,]),'sentencias':([21,24,27,68,128,132,145,191,],[27,27,27,27,27,27,27,27,]),'asignacion_variable':([21,24,27,68,128,132,145,191,],[28,28,28,28,28,28,28,28,]),'declaracion_variable':([21,24,27,68,128,132,145,191,],[29,29,29,29,29,29,29,29,]),'impresion':([21,24,27,68,128,132,145,191,],[30,30,30,30,30,30,30,30,]),'ingreso_datos':([21,24,27,68,128,132,145,191,],[31,31,31,31,31,31,31,31,]),'arreglos':([21,24,27,39,41,68,82,111,116,119,128,129,132,133,134,135,136,137,138,145,161,191,193,204,211,214,],[32,32,32,92,92,32,92,92,92,92,32,92,32,92,92,92,92,92,92,32,92,32,212,92,92,92,]),'control_structure':([21,24,27,68,128,132,145,191,],[33,33,33,33,33,33,33,33,]),'llamada':([21,24,27,68,128,132,145,191,],[34,34,34,34,34,34,34,34,]),'condicional':([21,24,27,68,128,132,145,191,],[40,40,40,40,40,40,40,40,]),'asig_data_type':([22,112,162,],[42,148,202,]),'data_type':([22,52,53,71,108,112,141,162,],[43,105,105,110,144,43,105,43,]),'list_type':([22,112,162,],[44,154,154,]),'tuple_type':([22,112,162,],[45,155,155,]),'signed_integer':([22,52,53,71,108,112,141,162,],[48,48,48,48,48,157,48,157,]),'unsigned_integer':([22,52,53,71,108,112,141,162,],[49,49,49,49,49,158,49,158,]),'float_type':([22,52,53,71,108,112,141,162,],[50,50,50,50,50,159,50,159,]),'valores':([39,82,119,204,214,],[85,114,166,223,228,]),'valor':([39,41,82,111,116,119,129,133,134,135,136,137,138,161,204,211,214,],[86,101,86,146,164,86,101,184,185,186,187,188,189,200,86,227,86,]),'operacion':([39,41,82,111,116,119,129,133,134,135,136,137,138,161,204,211,214,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'indexacion':([39,41,82,111,116,119,129,133,134,135,136,137,138,161,204,211,214,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'booleanos':([39,41,82,111,116,119,129,133,134,135,136,137,138,161,204,211,214,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'numeric':([39,41,82,111,116,119,121,122,123,124,125,126,129,133,134,135,136,137,138,161,204,211,214,],[95,95,95,95,95,95,168,172,173,174,175,176,95,95,95,95,95,95,95,95,95,95,95,]),'cadena':([39,41,82,111,116,119,127,129,133,134,135,136,137,138,161,204,211,214,],[96,96,96,96,96,96,177,96,96,96,96,96,96,96,96,96,96,96,]),'comparacion':([41,129,],[99,181,]),'proposicion':([41,129,],[100,182,]),'some_data_type':([52,53,141,],[104,106,190,]),'conector':([99,181,],[129,129,]),'asignacion':([112,162,],[147,201,]),'string_asignacion':([112,162,],[149,149,]),'numero_asignacion':([112,162,],[150,150,]),'boolean_asignacion':([112,162,],[151,151,]),'lista_asignacion':([112,162,],[152,152,]),'tupla_asignacion':([112,162,],[153,153,]),'retorno':([192,209,],[210,225,]),'tuplas':([194,],[213,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigoRust","S'",1,None,None,None),
  ('codigoRust -> functions fnmain functions','codigoRust',3,'p_codigoRust','main.py',9),
  ('codigoRust -> functions fnmain','codigoRust',2,'p_codigoRust','main.py',10),
  ('codigoRust -> fnmain functions','codigoRust',2,'p_codigoRust','main.py',11),
  ('codigoRust -> fnmain','codigoRust',1,'p_codigoRust','main.py',12),
  ('functions -> funcion','functions',1,'p_functions','main.py',19),
  ('functions -> funcion functions','functions',2,'p_functions','main.py',20),
  ('programa -> sentencias','programa',1,'p_programa','main.py',28),
  ('programa -> sentencias programa','programa',2,'p_programa','main.py',29),
  ('asignacion_variable -> LET IDENTIFIER ASIG valor','asignacion_variable',4,'p_asignacion_variable','main.py',35),
  ('asignacion_variable -> LET MUT IDENTIFIER ASIG valor','asignacion_variable',5,'p_asignacion_variable','main.py',36),
  ('asignacion_variable -> LET IDENTIFIER COLON asignacion','asignacion_variable',4,'p_asignacion_variable','main.py',37),
  ('asignacion_variable -> LET MUT IDENTIFIER COLON asignacion','asignacion_variable',5,'p_asignacion_variable','main.py',38),
  ('declaracion_variable -> LET IDENTIFIER','declaracion_variable',2,'p_declaracion_variable','main.py',43),
  ('declaracion_variable -> LET MUT IDENTIFIER','declaracion_variable',3,'p_declaracion_variable','main.py',44),
  ('declaracion_variable -> LET IDENTIFIER COLON asig_data_type','declaracion_variable',4,'p_declaracion_variable','main.py',45),
  ('declaracion_variable -> LET MUT IDENTIFIER COLON asig_data_type','declaracion_variable',5,'p_declaracion_variable','main.py',46),
  ('asignacion -> string_asignacion','asignacion',1,'p_asignacion','main.py',50),
  ('asignacion -> numero_asignacion','asignacion',1,'p_asignacion','main.py',51),
  ('asignacion -> boolean_asignacion','asignacion',1,'p_asignacion','main.py',52),
  ('asignacion -> lista_asignacion','asignacion',1,'p_asignacion','main.py',53),
  ('asignacion -> tupla_asignacion','asignacion',1,'p_asignacion','main.py',54),
  ('string_asignacion -> REFERENCE STR ASIG STRING','string_asignacion',4,'p_string_asignacion','main.py',58),
  ('numero_asignacion -> signed_integer ASIG INTEGER','numero_asignacion',3,'p_numero_asignacion','main.py',61),
  ('numero_asignacion -> signed_integer ASIG MINUS INTEGER','numero_asignacion',4,'p_numero_asignacion','main.py',62),
  ('numero_asignacion -> unsigned_integer ASIG INTEGER','numero_asignacion',3,'p_numero_asignacion','main.py',63),
  ('numero_asignacion -> float_type ASIG FLOAT','numero_asignacion',3,'p_numero_asignacion','main.py',64),
  ('numero_asignacion -> float_type ASIG MINUS FLOAT','numero_asignacion',4,'p_numero_asignacion','main.py',65),
  ('boolean_asignacion -> BOOL ASIG TRUE','boolean_asignacion',3,'p_boolean_asignacion','main.py',68),
  ('boolean_asignacion -> BOOL ASIG FALSE','boolean_asignacion',3,'p_boolean_asignacion','main.py',69),
  ('lista_asignacion -> list_type ASIG arreglos','lista_asignacion',3,'p_lista_asignacion','main.py',72),
  ('tupla_asignacion -> tuple_type ASIG tuplas','tupla_asignacion',3,'p_tupla_asignacion','main.py',74),
  ('comparacion -> valor EQ valor','comparacion',3,'p_comparacion','main.py',77),
  ('comparacion -> valor NEQ valor','comparacion',3,'p_comparacion','main.py',78),
  ('comparacion -> valor GEQ valor','comparacion',3,'p_comparacion','main.py',79),
  ('comparacion -> valor LEQ valor','comparacion',3,'p_comparacion','main.py',80),
  ('comparacion -> valor RIGHTARROW valor','comparacion',3,'p_comparacion','main.py',81),
  ('comparacion -> valor LEFTARROW valor','comparacion',3,'p_comparacion','main.py',82),
  ('valor -> INTEGER','valor',1,'p_valor','main.py',87),
  ('valor -> FLOAT','valor',1,'p_valor','main.py',88),
  ('valor -> IDENTIFIER','valor',1,'p_valor','main.py',89),
  ('valor -> operacion','valor',1,'p_valor','main.py',90),
  ('valor -> indexacion','valor',1,'p_valor','main.py',91),
  ('valor -> arreglos','valor',1,'p_valor','main.py',92),
  ('valor -> STRING','valor',1,'p_valor','main.py',93),
  ('valor -> booleanos','valor',1,'p_valor','main.py',94),
  ('booleanos -> TRUE','booleanos',1,'p_booleanos','main.py',100),
  ('booleanos -> FALSE','booleanos',1,'p_booleanos','main.py',101),
  ('vacio -> <empty>','vacio',0,'p_vacio','main.py',106),
  ('sentencias -> asignacion_variable SEMICOLON','sentencias',2,'p_sentencias','main.py',113),
  ('sentencias -> declaracion_variable SEMICOLON','sentencias',2,'p_sentencias','main.py',114),
  ('sentencias -> impresion SEMICOLON','sentencias',2,'p_sentencias','main.py',115),
  ('sentencias -> ingreso_datos SEMICOLON','sentencias',2,'p_sentencias','main.py',116),
  ('sentencias -> arreglos SEMICOLON','sentencias',2,'p_sentencias','main.py',117),
  ('sentencias -> control_structure','sentencias',1,'p_sentencias','main.py',118),
  ('sentencias -> llamada SEMICOLON','sentencias',2,'p_sentencias','main.py',119),
  ('impresion -> PRINTLN EXCLAMATION LPAREN valor RPAREN','impresion',5,'p_impresion','main.py',124),
  ('impresion -> PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN','impresion',7,'p_impresion','main.py',125),
  ('funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE','funcion',8,'p_funcion','main.py',133),
  ('funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE','funcion',7,'p_funcion','main.py',134),
  ('funcion -> FN IDENTIFIER LPAREN parameters RPAREN MINUS RIGHTARROW data_type LLLAVE programa retorno RLLAVE','funcion',12,'p_funcion','main.py',135),
  ('funcion -> FN IDENTIFIER LPAREN RPAREN MINUS RIGHTARROW data_type LLLAVE programa retorno RLLAVE','funcion',11,'p_funcion','main.py',136),
  ('retorno -> RETURN valor SEMICOLON','retorno',3,'p_retorno','main.py',141),
  ('parameters -> IDENTIFIER COLON asig_data_type','parameters',3,'p_parameters','main.py',149),
  ('parameters -> IDENTIFIER COLON asig_data_type COMMA parameters','parameters',5,'p_parameters','main.py',150),
  ('parameters -> vacio','parameters',1,'p_parameters','main.py',151),
  ('ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN','ingreso_datos',15,'p_ingreso_datos','main.py',158),
  ('asig_data_type -> data_type','asig_data_type',1,'p_asig_data_type','main.py',165),
  ('asig_data_type -> list_type','asig_data_type',1,'p_asig_data_type','main.py',166),
  ('asig_data_type -> tuple_type','asig_data_type',1,'p_asig_data_type','main.py',167),
  ('list_type -> LCORCH some_data_type RCORCH','list_type',3,'p_list_type','main.py',170),
  ('tuple_type -> LPAREN some_data_type RPAREN','tuple_type',3,'p_tuple_type','main.py',172),
  ('data_type -> CHAR','data_type',1,'p_data_type','main.py',176),
  ('data_type -> REFERENCE STR','data_type',2,'p_data_type','main.py',177),
  ('data_type -> signed_integer','data_type',1,'p_data_type','main.py',178),
  ('data_type -> unsigned_integer','data_type',1,'p_data_type','main.py',179),
  ('data_type -> float_type','data_type',1,'p_data_type','main.py',180),
  ('data_type -> BOOL','data_type',1,'p_data_type','main.py',181),
  ('signed_integer -> I8','signed_integer',1,'p_signed_integer','main.py',186),
  ('signed_integer -> I16','signed_integer',1,'p_signed_integer','main.py',187),
  ('signed_integer -> I32','signed_integer',1,'p_signed_integer','main.py',188),
  ('signed_integer -> I64','signed_integer',1,'p_signed_integer','main.py',189),
  ('signed_integer -> I128','signed_integer',1,'p_signed_integer','main.py',190),
  ('signed_integer -> ISIZE','signed_integer',1,'p_signed_integer','main.py',191),
  ('unsigned_integer -> U8','unsigned_integer',1,'p_unsigned_integer','main.py',196),
  ('unsigned_integer -> U16','unsigned_integer',1,'p_unsigned_integer','main.py',197),
  ('unsigned_integer -> U32','unsigned_integer',1,'p_unsigned_integer','main.py',198),
  ('unsigned_integer -> U64','unsigned_integer',1,'p_unsigned_integer','main.py',199),
  ('unsigned_integer -> U128','unsigned_integer',1,'p_unsigned_integer','main.py',200),
  ('unsigned_integer -> USIZE','unsigned_integer',1,'p_unsigned_integer','main.py',201),
  ('float_type -> F32','float_type',1,'p_float_type','main.py',206),
  ('float_type -> F64','float_type',1,'p_float_type','main.py',207),
  ('some_data_type -> data_type','some_data_type',1,'p_some_data_type','main.py',213),
  ('some_data_type -> data_type COMMA some_data_type','some_data_type',3,'p_some_data_type','main.py',214),
  ('control_structure -> condicional','control_structure',1,'p_control_structure','main.py',220),
  ('arreglos -> LCORCH valores RCORCH','arreglos',3,'p_arreglos','main.py',226),
  ('tuplas -> LPAREN valores RPAREN','tuplas',3,'p_tuplas','main.py',231),
  ('valores -> valor','valores',1,'p_valores','main.py',235),
  ('valores -> valor COMMA valores','valores',3,'p_valores','main.py',236),
  ('conector -> AND','conector',1,'p_conector','main.py',245),
  ('conector -> OR','conector',1,'p_conector','main.py',246),
  ('proposicion -> comparacion conector proposicion','proposicion',3,'p_proposicionC','main.py',250),
  ('proposicion -> comparacion','proposicion',1,'p_proposicionC','main.py',251),
  ('condicional -> IF comparacion LLLAVE programa RLLAVE','condicional',5,'p_condicional','main.py',255),
  ('condicional -> IF proposicion LLLAVE programa RLLAVE','condicional',5,'p_condicional','main.py',256),
  ('numeric -> INTEGER','numeric',1,'p_numeric_var','main.py',261),
  ('numeric -> FLOAT','numeric',1,'p_numeric_var','main.py',262),
  ('numeric -> IDENTIFIER','numeric',1,'p_numeric_var','main.py',263),
  ('cadena -> STRING','cadena',1,'p_cadena','main.py',267),
  ('cadena -> IDENTIFIER','cadena',1,'p_cadena','main.py',268),
  ('operacion -> numeric PLUS numeric','operacion',3,'p_operacion','main.py',274),
  ('operacion -> numeric MINUS numeric','operacion',3,'p_operacion','main.py',275),
  ('operacion -> numeric TIMES numeric','operacion',3,'p_operacion','main.py',276),
  ('operacion -> numeric DIVIDE numeric','operacion',3,'p_operacion','main.py',277),
  ('operacion -> numeric MOD numeric','operacion',3,'p_operacion','main.py',278),
  ('operacion -> numeric INTD numeric','operacion',3,'p_operacion','main.py',279),
  ('operacion -> cadena PLUS cadena','operacion',3,'p_operacion','main.py',280),
  ('indexacion -> IDENTIFIER LCORCH INTEGER RCORCH','indexacion',4,'p_indexacion','main.py',284),
  ('llamada -> IDENTIFIER LPAREN valores RPAREN','llamada',4,'p_llamada','main.py',289),
  ('llamada -> IDENTIFIER LPAREN RPAREN','llamada',3,'p_llamada','main.py',290),
  ('fnmain -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE','fnmain',7,'p_fnmain','main.py',296),
]
