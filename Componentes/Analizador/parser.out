Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOUBLE_QUOTATION_MARK
    ELSE
    FALSE
    FOR
    FROM
    IMPL
    IN
    MATCH
    NOT
    QUOTATION_MARK
    RAND
    RETURN
    SELF
    STR
    STRUCT
    TRUE
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias
Rule 2     programa -> sentencias programa
Rule 3     asignacion -> LET IDENTIFIER ASIG valor
Rule 4     asignacion -> LET MUT IDENTIFIER ASIG valor
Rule 5     asignacion -> LET IDENTIFIER COLON asig_data_type ASIG valor
Rule 6     asignacion -> LET MUT IDENTIFIER COLON asig_data_type ASIG valor
Rule 7     comparacion -> valor EQ valor
Rule 8     comparacion -> valor NEQ valor
Rule 9     comparacion -> valor GEQ valor
Rule 10    comparacion -> valor LEQ valor
Rule 11    comparacion -> valor RIGHTARROW valor
Rule 12    comparacion -> valor LEFTARROW valor
Rule 13    valor -> INTEGER
Rule 14    valor -> FLOAT
Rule 15    valor -> IDENTIFIER
Rule 16    valor -> operacion
Rule 17    valor -> indexacion
Rule 18    valor -> arreglos
Rule 19    valor -> STRING
Rule 20    vacio -> <empty>
Rule 21    sentencias -> asignacion SEMICOLON
Rule 22    sentencias -> impresion SEMICOLON
Rule 23    sentencias -> funcion
Rule 24    sentencias -> ingreso_datos SEMICOLON
Rule 25    sentencias -> arreglos SEMICOLON
Rule 26    sentencias -> control_structure
Rule 27    sentencias -> llamada SEMICOLON
Rule 28    impresion -> PRINTLN EXCLAMATION LPAREN valor RPAREN
Rule 29    impresion -> PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
Rule 30    funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
Rule 31    funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
Rule 32    funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
Rule 33    funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
Rule 34    parameters -> IDENTIFIER COLON asig_data_type
Rule 35    parameters -> IDENTIFIER COLON asig_data_type COMMA parameters
Rule 36    parameters -> vacio
Rule 37    ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
Rule 38    asig_data_type -> data_type
Rule 39    asig_data_type -> LPAREN some_data_type RPAREN
Rule 40    asig_data_type -> LCORCH some_data_type RCORCH
Rule 41    data_type -> CHAR
Rule 42    data_type -> signed_integer
Rule 43    data_type -> unsigned_integer
Rule 44    data_type -> float_type
Rule 45    data_type -> BOOL
Rule 46    signed_integer -> I8
Rule 47    signed_integer -> I16
Rule 48    signed_integer -> I32
Rule 49    signed_integer -> I64
Rule 50    signed_integer -> I128
Rule 51    signed_integer -> ISIZE
Rule 52    unsigned_integer -> U8
Rule 53    unsigned_integer -> U16
Rule 54    unsigned_integer -> U32
Rule 55    unsigned_integer -> U64
Rule 56    unsigned_integer -> U128
Rule 57    unsigned_integer -> USIZE
Rule 58    float_type -> F32
Rule 59    float_type -> F64
Rule 60    some_data_type -> data_type
Rule 61    some_data_type -> data_type COMMA some_data_type
Rule 62    control_structure -> condicional
Rule 63    arreglos -> LCORCH valores RCORCH
Rule 64    valores -> valor
Rule 65    valores -> valor COMMA valores
Rule 66    conector -> AND
Rule 67    conector -> OR
Rule 68    proposicion -> comparacion conector proposicion
Rule 69    proposicion -> comparacion
Rule 70    condicional -> IF comparacion LLLAVE programa RLLAVE
Rule 71    condicional -> IF proposicion LLLAVE programa RLLAVE
Rule 72    operacion -> valor PLUS valor
Rule 73    operacion -> valor MINUS valor
Rule 74    operacion -> valor TIMES valor
Rule 75    operacion -> valor DIVIDE valor
Rule 76    operacion -> valor MOD valor
Rule 77    operacion -> valor INTD valor
Rule 78    indexacion -> IDENTIFIER LCORCH INTEGER RCORCH
Rule 79    llamada -> IDENTIFIER LPAREN valores RPAREN

Terminals, with rules where they appear

AND                  : 66
ASIG                 : 3 4 5 6
BOOL                 : 45
CHAR                 : 41
COLON                : 5 6 34 35
COMMA                : 29 35 61 65
DIVIDE               : 75
DOT                  : 37 37
DOUBLE_COLON         : 37 37
DOUBLE_QUOTATION_MARK : 
ELSE                 : 
EQ                   : 7
EXCLAMATION          : 28 29
F32                  : 58
F64                  : 59
FALSE                : 
FLOAT                : 14
FN                   : 30 31 32 33
FOR                  : 
FROM                 : 
GEQ                  : 9
I128                 : 50
I16                  : 47
I32                  : 48
I64                  : 49
I8                   : 46
IDENTIFIER           : 3 4 5 6 15 30 33 34 35 37 78 79
IF                   : 70 71
IMPL                 : 
IN                   : 
INTD                 : 77
INTEGER              : 13 78
IO                   : 37
ISIZE                : 51
LCORCH               : 40 63 78
LEFTARROW            : 12
LEQ                  : 10
LET                  : 3 4 5 6
LLLAVE               : 30 31 32 33 70 71
LPAREN               : 28 29 30 31 32 33 37 37 39 79
MAIN                 : 31 32
MATCH                : 
MINUS                : 73
MOD                  : 76
MUT                  : 4 6 37
NEQ                  : 8
NOT                  : 
OR                   : 67
PLUS                 : 72
PRINTLN              : 28 29
QUOTATION_MARK       : 
RAND                 : 
RCORCH               : 40 63 78
READLINE             : 37
REFERENCE            : 37
RETURN               : 
RIGHTARROW           : 11
RLLAVE               : 30 31 32 33 70 71
RPAREN               : 28 29 30 31 32 33 37 37 39 79
SELF                 : 
SEMICOLON            : 21 22 24 25 27
STD                  : 37
STDIN                : 37
STR                  : 
STRING               : 19
STRUCT               : 
TIMES                : 74
TRUE                 : 
U128                 : 56
U16                  : 53
U32                  : 54
U64                  : 55
U8                   : 52
USIZE                : 57
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arreglos             : 18 25
asig_data_type       : 5 6 34 35
asignacion           : 21
comparacion          : 68 69 70
condicional          : 62
conector             : 68
control_structure    : 26
data_type            : 38 60 61
float_type           : 44
funcion              : 23
impresion            : 22
indexacion           : 17
ingreso_datos        : 24
llamada              : 27
operacion            : 16
parameters           : 30 31 35
programa             : 2 30 31 32 33 70 71 0
proposicion          : 68 71
sentencias           : 1 2
signed_integer       : 42
some_data_type       : 39 40 61
unsigned_integer     : 43
vacio                : 36
valor                : 3 4 5 6 7 7 8 8 9 9 10 10 11 11 12 12 28 29 64 65 72 72 73 73 74 74 75 75 76 76 77 77
valores              : 29 63 65 79

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias .
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    $end            reduce using rule 1 (programa -> sentencias .)
    RLLAVE          reduce using rule 1 (programa -> sentencias .)
    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    sentencias                     shift and go to state 2
    programa                       shift and go to state 18
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 3

    (21) sentencias -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 19


state 4

    (22) sentencias -> impresion . SEMICOLON

    SEMICOLON       shift and go to state 20


state 5

    (23) sentencias -> funcion .

    LET             reduce using rule 23 (sentencias -> funcion .)
    PRINTLN         reduce using rule 23 (sentencias -> funcion .)
    FN              reduce using rule 23 (sentencias -> funcion .)
    STD             reduce using rule 23 (sentencias -> funcion .)
    LCORCH          reduce using rule 23 (sentencias -> funcion .)
    IDENTIFIER      reduce using rule 23 (sentencias -> funcion .)
    IF              reduce using rule 23 (sentencias -> funcion .)
    $end            reduce using rule 23 (sentencias -> funcion .)
    RLLAVE          reduce using rule 23 (sentencias -> funcion .)


state 6

    (24) sentencias -> ingreso_datos . SEMICOLON

    SEMICOLON       shift and go to state 21


state 7

    (25) sentencias -> arreglos . SEMICOLON

    SEMICOLON       shift and go to state 22


state 8

    (26) sentencias -> control_structure .

    LET             reduce using rule 26 (sentencias -> control_structure .)
    PRINTLN         reduce using rule 26 (sentencias -> control_structure .)
    FN              reduce using rule 26 (sentencias -> control_structure .)
    STD             reduce using rule 26 (sentencias -> control_structure .)
    LCORCH          reduce using rule 26 (sentencias -> control_structure .)
    IDENTIFIER      reduce using rule 26 (sentencias -> control_structure .)
    IF              reduce using rule 26 (sentencias -> control_structure .)
    $end            reduce using rule 26 (sentencias -> control_structure .)
    RLLAVE          reduce using rule 26 (sentencias -> control_structure .)


state 9

    (27) sentencias -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 23


state 10

    (3) asignacion -> LET . IDENTIFIER ASIG valor
    (4) asignacion -> LET . MUT IDENTIFIER ASIG valor
    (5) asignacion -> LET . IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> LET . MUT IDENTIFIER COLON asig_data_type ASIG valor

    IDENTIFIER      shift and go to state 24
    MUT             shift and go to state 25


state 11

    (79) llamada -> IDENTIFIER . LPAREN valores RPAREN

    LPAREN          shift and go to state 26


state 12

    (28) impresion -> PRINTLN . EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> PRINTLN . EXCLAMATION LPAREN valor COMMA valores RPAREN

    EXCLAMATION     shift and go to state 27


state 13

    (30) funcion -> FN . IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> FN . MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> FN . MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> FN . IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE

    IDENTIFIER      shift and go to state 28
    MAIN            shift and go to state 29


state 14

    (37) ingreso_datos -> STD . DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOUBLE_COLON    shift and go to state 30


state 15

    (63) arreglos -> LCORCH . valores RCORCH
    (64) valores -> . valor
    (65) valores -> . valor COMMA valores
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valores                        shift and go to state 31
    valor                          shift and go to state 32
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 16

    (62) control_structure -> condicional .

    LET             reduce using rule 62 (control_structure -> condicional .)
    PRINTLN         reduce using rule 62 (control_structure -> condicional .)
    FN              reduce using rule 62 (control_structure -> condicional .)
    STD             reduce using rule 62 (control_structure -> condicional .)
    LCORCH          reduce using rule 62 (control_structure -> condicional .)
    IDENTIFIER      reduce using rule 62 (control_structure -> condicional .)
    IF              reduce using rule 62 (control_structure -> condicional .)
    $end            reduce using rule 62 (control_structure -> condicional .)
    RLLAVE          reduce using rule 62 (control_structure -> condicional .)


state 17

    (70) condicional -> IF . comparacion LLLAVE programa RLLAVE
    (71) condicional -> IF . proposicion LLLAVE programa RLLAVE
    (7) comparacion -> . valor EQ valor
    (8) comparacion -> . valor NEQ valor
    (9) comparacion -> . valor GEQ valor
    (10) comparacion -> . valor LEQ valor
    (11) comparacion -> . valor RIGHTARROW valor
    (12) comparacion -> . valor LEFTARROW valor
    (68) proposicion -> . comparacion conector proposicion
    (69) proposicion -> . comparacion
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    comparacion                    shift and go to state 40
    proposicion                    shift and go to state 41
    valor                          shift and go to state 42
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 18

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)
    RLLAVE          reduce using rule 2 (programa -> sentencias programa .)


state 19

    (21) sentencias -> asignacion SEMICOLON .

    LET             reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    PRINTLN         reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    FN              reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    STD             reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    LCORCH          reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    IF              reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    $end            reduce using rule 21 (sentencias -> asignacion SEMICOLON .)
    RLLAVE          reduce using rule 21 (sentencias -> asignacion SEMICOLON .)


state 20

    (22) sentencias -> impresion SEMICOLON .

    LET             reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    PRINTLN         reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    FN              reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    STD             reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    LCORCH          reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    IF              reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    $end            reduce using rule 22 (sentencias -> impresion SEMICOLON .)
    RLLAVE          reduce using rule 22 (sentencias -> impresion SEMICOLON .)


state 21

    (24) sentencias -> ingreso_datos SEMICOLON .

    LET             reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    PRINTLN         reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    FN              reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    STD             reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    LCORCH          reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    IF              reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    $end            reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)
    RLLAVE          reduce using rule 24 (sentencias -> ingreso_datos SEMICOLON .)


state 22

    (25) sentencias -> arreglos SEMICOLON .

    LET             reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    PRINTLN         reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    FN              reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    STD             reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    LCORCH          reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    IF              reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    $end            reduce using rule 25 (sentencias -> arreglos SEMICOLON .)
    RLLAVE          reduce using rule 25 (sentencias -> arreglos SEMICOLON .)


state 23

    (27) sentencias -> llamada SEMICOLON .

    LET             reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    PRINTLN         reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    FN              reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    STD             reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    LCORCH          reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    IF              reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    $end            reduce using rule 27 (sentencias -> llamada SEMICOLON .)
    RLLAVE          reduce using rule 27 (sentencias -> llamada SEMICOLON .)


state 24

    (3) asignacion -> LET IDENTIFIER . ASIG valor
    (5) asignacion -> LET IDENTIFIER . COLON asig_data_type ASIG valor

    ASIG            shift and go to state 43
    COLON           shift and go to state 44


state 25

    (4) asignacion -> LET MUT . IDENTIFIER ASIG valor
    (6) asignacion -> LET MUT . IDENTIFIER COLON asig_data_type ASIG valor

    IDENTIFIER      shift and go to state 45


state 26

    (79) llamada -> IDENTIFIER LPAREN . valores RPAREN
    (64) valores -> . valor
    (65) valores -> . valor COMMA valores
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valores                        shift and go to state 46
    valor                          shift and go to state 32
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 27

    (28) impresion -> PRINTLN EXCLAMATION . LPAREN valor RPAREN
    (29) impresion -> PRINTLN EXCLAMATION . LPAREN valor COMMA valores RPAREN

    LPAREN          shift and go to state 47


state 28

    (30) funcion -> FN IDENTIFIER . LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (33) funcion -> FN IDENTIFIER . LPAREN RPAREN LLLAVE programa RLLAVE

    LPAREN          shift and go to state 48


state 29

    (31) funcion -> FN MAIN . LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> FN MAIN . LPAREN RPAREN LLLAVE programa RLLAVE

    LPAREN          shift and go to state 49


state 30

    (37) ingreso_datos -> STD DOUBLE_COLON . IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    IO              shift and go to state 50


state 31

    (63) arreglos -> LCORCH valores . RCORCH

    RCORCH          shift and go to state 51


state 32

    (64) valores -> valor .
    (65) valores -> valor . COMMA valores
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    RCORCH          reduce using rule 64 (valores -> valor .)
    RPAREN          reduce using rule 64 (valores -> valor .)
    COMMA           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 33

    (13) valor -> INTEGER .

    COMMA           reduce using rule 13 (valor -> INTEGER .)
    PLUS            reduce using rule 13 (valor -> INTEGER .)
    MINUS           reduce using rule 13 (valor -> INTEGER .)
    TIMES           reduce using rule 13 (valor -> INTEGER .)
    DIVIDE          reduce using rule 13 (valor -> INTEGER .)
    MOD             reduce using rule 13 (valor -> INTEGER .)
    INTD            reduce using rule 13 (valor -> INTEGER .)
    RCORCH          reduce using rule 13 (valor -> INTEGER .)
    EQ              reduce using rule 13 (valor -> INTEGER .)
    NEQ             reduce using rule 13 (valor -> INTEGER .)
    GEQ             reduce using rule 13 (valor -> INTEGER .)
    LEQ             reduce using rule 13 (valor -> INTEGER .)
    RIGHTARROW      reduce using rule 13 (valor -> INTEGER .)
    LEFTARROW       reduce using rule 13 (valor -> INTEGER .)
    RPAREN          reduce using rule 13 (valor -> INTEGER .)
    SEMICOLON       reduce using rule 13 (valor -> INTEGER .)
    LLLAVE          reduce using rule 13 (valor -> INTEGER .)
    AND             reduce using rule 13 (valor -> INTEGER .)
    OR              reduce using rule 13 (valor -> INTEGER .)


state 34

    (14) valor -> FLOAT .

    COMMA           reduce using rule 14 (valor -> FLOAT .)
    PLUS            reduce using rule 14 (valor -> FLOAT .)
    MINUS           reduce using rule 14 (valor -> FLOAT .)
    TIMES           reduce using rule 14 (valor -> FLOAT .)
    DIVIDE          reduce using rule 14 (valor -> FLOAT .)
    MOD             reduce using rule 14 (valor -> FLOAT .)
    INTD            reduce using rule 14 (valor -> FLOAT .)
    RCORCH          reduce using rule 14 (valor -> FLOAT .)
    EQ              reduce using rule 14 (valor -> FLOAT .)
    NEQ             reduce using rule 14 (valor -> FLOAT .)
    GEQ             reduce using rule 14 (valor -> FLOAT .)
    LEQ             reduce using rule 14 (valor -> FLOAT .)
    RIGHTARROW      reduce using rule 14 (valor -> FLOAT .)
    LEFTARROW       reduce using rule 14 (valor -> FLOAT .)
    RPAREN          reduce using rule 14 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 14 (valor -> FLOAT .)
    LLLAVE          reduce using rule 14 (valor -> FLOAT .)
    AND             reduce using rule 14 (valor -> FLOAT .)
    OR              reduce using rule 14 (valor -> FLOAT .)


state 35

    (15) valor -> IDENTIFIER .
    (78) indexacion -> IDENTIFIER . LCORCH INTEGER RCORCH

    COMMA           reduce using rule 15 (valor -> IDENTIFIER .)
    PLUS            reduce using rule 15 (valor -> IDENTIFIER .)
    MINUS           reduce using rule 15 (valor -> IDENTIFIER .)
    TIMES           reduce using rule 15 (valor -> IDENTIFIER .)
    DIVIDE          reduce using rule 15 (valor -> IDENTIFIER .)
    MOD             reduce using rule 15 (valor -> IDENTIFIER .)
    INTD            reduce using rule 15 (valor -> IDENTIFIER .)
    RCORCH          reduce using rule 15 (valor -> IDENTIFIER .)
    EQ              reduce using rule 15 (valor -> IDENTIFIER .)
    NEQ             reduce using rule 15 (valor -> IDENTIFIER .)
    GEQ             reduce using rule 15 (valor -> IDENTIFIER .)
    LEQ             reduce using rule 15 (valor -> IDENTIFIER .)
    RIGHTARROW      reduce using rule 15 (valor -> IDENTIFIER .)
    LEFTARROW       reduce using rule 15 (valor -> IDENTIFIER .)
    RPAREN          reduce using rule 15 (valor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 15 (valor -> IDENTIFIER .)
    LLLAVE          reduce using rule 15 (valor -> IDENTIFIER .)
    AND             reduce using rule 15 (valor -> IDENTIFIER .)
    OR              reduce using rule 15 (valor -> IDENTIFIER .)
    LCORCH          shift and go to state 59


state 36

    (16) valor -> operacion .

    COMMA           reduce using rule 16 (valor -> operacion .)
    PLUS            reduce using rule 16 (valor -> operacion .)
    MINUS           reduce using rule 16 (valor -> operacion .)
    TIMES           reduce using rule 16 (valor -> operacion .)
    DIVIDE          reduce using rule 16 (valor -> operacion .)
    MOD             reduce using rule 16 (valor -> operacion .)
    INTD            reduce using rule 16 (valor -> operacion .)
    RCORCH          reduce using rule 16 (valor -> operacion .)
    EQ              reduce using rule 16 (valor -> operacion .)
    NEQ             reduce using rule 16 (valor -> operacion .)
    GEQ             reduce using rule 16 (valor -> operacion .)
    LEQ             reduce using rule 16 (valor -> operacion .)
    RIGHTARROW      reduce using rule 16 (valor -> operacion .)
    LEFTARROW       reduce using rule 16 (valor -> operacion .)
    RPAREN          reduce using rule 16 (valor -> operacion .)
    SEMICOLON       reduce using rule 16 (valor -> operacion .)
    LLLAVE          reduce using rule 16 (valor -> operacion .)
    AND             reduce using rule 16 (valor -> operacion .)
    OR              reduce using rule 16 (valor -> operacion .)


state 37

    (17) valor -> indexacion .

    COMMA           reduce using rule 17 (valor -> indexacion .)
    PLUS            reduce using rule 17 (valor -> indexacion .)
    MINUS           reduce using rule 17 (valor -> indexacion .)
    TIMES           reduce using rule 17 (valor -> indexacion .)
    DIVIDE          reduce using rule 17 (valor -> indexacion .)
    MOD             reduce using rule 17 (valor -> indexacion .)
    INTD            reduce using rule 17 (valor -> indexacion .)
    RCORCH          reduce using rule 17 (valor -> indexacion .)
    EQ              reduce using rule 17 (valor -> indexacion .)
    NEQ             reduce using rule 17 (valor -> indexacion .)
    GEQ             reduce using rule 17 (valor -> indexacion .)
    LEQ             reduce using rule 17 (valor -> indexacion .)
    RIGHTARROW      reduce using rule 17 (valor -> indexacion .)
    LEFTARROW       reduce using rule 17 (valor -> indexacion .)
    RPAREN          reduce using rule 17 (valor -> indexacion .)
    SEMICOLON       reduce using rule 17 (valor -> indexacion .)
    LLLAVE          reduce using rule 17 (valor -> indexacion .)
    AND             reduce using rule 17 (valor -> indexacion .)
    OR              reduce using rule 17 (valor -> indexacion .)


state 38

    (18) valor -> arreglos .

    COMMA           reduce using rule 18 (valor -> arreglos .)
    PLUS            reduce using rule 18 (valor -> arreglos .)
    MINUS           reduce using rule 18 (valor -> arreglos .)
    TIMES           reduce using rule 18 (valor -> arreglos .)
    DIVIDE          reduce using rule 18 (valor -> arreglos .)
    MOD             reduce using rule 18 (valor -> arreglos .)
    INTD            reduce using rule 18 (valor -> arreglos .)
    RCORCH          reduce using rule 18 (valor -> arreglos .)
    EQ              reduce using rule 18 (valor -> arreglos .)
    NEQ             reduce using rule 18 (valor -> arreglos .)
    GEQ             reduce using rule 18 (valor -> arreglos .)
    LEQ             reduce using rule 18 (valor -> arreglos .)
    RIGHTARROW      reduce using rule 18 (valor -> arreglos .)
    LEFTARROW       reduce using rule 18 (valor -> arreglos .)
    RPAREN          reduce using rule 18 (valor -> arreglos .)
    SEMICOLON       reduce using rule 18 (valor -> arreglos .)
    LLLAVE          reduce using rule 18 (valor -> arreglos .)
    AND             reduce using rule 18 (valor -> arreglos .)
    OR              reduce using rule 18 (valor -> arreglos .)


state 39

    (19) valor -> STRING .

    COMMA           reduce using rule 19 (valor -> STRING .)
    PLUS            reduce using rule 19 (valor -> STRING .)
    MINUS           reduce using rule 19 (valor -> STRING .)
    TIMES           reduce using rule 19 (valor -> STRING .)
    DIVIDE          reduce using rule 19 (valor -> STRING .)
    MOD             reduce using rule 19 (valor -> STRING .)
    INTD            reduce using rule 19 (valor -> STRING .)
    RCORCH          reduce using rule 19 (valor -> STRING .)
    EQ              reduce using rule 19 (valor -> STRING .)
    NEQ             reduce using rule 19 (valor -> STRING .)
    GEQ             reduce using rule 19 (valor -> STRING .)
    LEQ             reduce using rule 19 (valor -> STRING .)
    RIGHTARROW      reduce using rule 19 (valor -> STRING .)
    LEFTARROW       reduce using rule 19 (valor -> STRING .)
    RPAREN          reduce using rule 19 (valor -> STRING .)
    SEMICOLON       reduce using rule 19 (valor -> STRING .)
    LLLAVE          reduce using rule 19 (valor -> STRING .)
    AND             reduce using rule 19 (valor -> STRING .)
    OR              reduce using rule 19 (valor -> STRING .)


state 40

    (70) condicional -> IF comparacion . LLLAVE programa RLLAVE
    (68) proposicion -> comparacion . conector proposicion
    (69) proposicion -> comparacion .
    (66) conector -> . AND
    (67) conector -> . OR

  ! shift/reduce conflict for LLLAVE resolved as shift
    LLLAVE          shift and go to state 60
    AND             shift and go to state 62
    OR              shift and go to state 63

  ! LLLAVE          [ reduce using rule 69 (proposicion -> comparacion .) ]

    conector                       shift and go to state 61

state 41

    (71) condicional -> IF proposicion . LLLAVE programa RLLAVE

    LLLAVE          shift and go to state 64


state 42

    (7) comparacion -> valor . EQ valor
    (8) comparacion -> valor . NEQ valor
    (9) comparacion -> valor . GEQ valor
    (10) comparacion -> valor . LEQ valor
    (11) comparacion -> valor . RIGHTARROW valor
    (12) comparacion -> valor . LEFTARROW valor
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    EQ              shift and go to state 65
    NEQ             shift and go to state 66
    GEQ             shift and go to state 67
    LEQ             shift and go to state 68
    RIGHTARROW      shift and go to state 69
    LEFTARROW       shift and go to state 70
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 43

    (3) asignacion -> LET IDENTIFIER ASIG . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 71
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 44

    (5) asignacion -> LET IDENTIFIER COLON . asig_data_type ASIG valor
    (38) asig_data_type -> . data_type
    (39) asig_data_type -> . LPAREN some_data_type RPAREN
    (40) asig_data_type -> . LCORCH some_data_type RCORCH
    (41) data_type -> . CHAR
    (42) data_type -> . signed_integer
    (43) data_type -> . unsigned_integer
    (44) data_type -> . float_type
    (45) data_type -> . BOOL
    (46) signed_integer -> . I8
    (47) signed_integer -> . I16
    (48) signed_integer -> . I32
    (49) signed_integer -> . I64
    (50) signed_integer -> . I128
    (51) signed_integer -> . ISIZE
    (52) unsigned_integer -> . U8
    (53) unsigned_integer -> . U16
    (54) unsigned_integer -> . U32
    (55) unsigned_integer -> . U64
    (56) unsigned_integer -> . U128
    (57) unsigned_integer -> . USIZE
    (58) float_type -> . F32
    (59) float_type -> . F64

    LPAREN          shift and go to state 74
    LCORCH          shift and go to state 75
    CHAR            shift and go to state 76
    BOOL            shift and go to state 80
    I8              shift and go to state 81
    I16             shift and go to state 82
    I32             shift and go to state 83
    I64             shift and go to state 84
    I128            shift and go to state 85
    ISIZE           shift and go to state 86
    U8              shift and go to state 87
    U16             shift and go to state 88
    U32             shift and go to state 89
    U64             shift and go to state 90
    U128            shift and go to state 91
    USIZE           shift and go to state 92
    F32             shift and go to state 93
    F64             shift and go to state 94

    asig_data_type                 shift and go to state 72
    data_type                      shift and go to state 73
    signed_integer                 shift and go to state 77
    unsigned_integer               shift and go to state 78
    float_type                     shift and go to state 79

state 45

    (4) asignacion -> LET MUT IDENTIFIER . ASIG valor
    (6) asignacion -> LET MUT IDENTIFIER . COLON asig_data_type ASIG valor

    ASIG            shift and go to state 95
    COLON           shift and go to state 96


state 46

    (79) llamada -> IDENTIFIER LPAREN valores . RPAREN

    RPAREN          shift and go to state 97


state 47

    (28) impresion -> PRINTLN EXCLAMATION LPAREN . valor RPAREN
    (29) impresion -> PRINTLN EXCLAMATION LPAREN . valor COMMA valores RPAREN
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 98
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 48

    (30) funcion -> FN IDENTIFIER LPAREN . parameters RPAREN LLLAVE programa RLLAVE
    (33) funcion -> FN IDENTIFIER LPAREN . RPAREN LLLAVE programa RLLAVE
    (34) parameters -> . IDENTIFIER COLON asig_data_type
    (35) parameters -> . IDENTIFIER COLON asig_data_type COMMA parameters
    (36) parameters -> . vacio
    (20) vacio -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 101
    IDENTIFIER      shift and go to state 99

  ! RPAREN          [ reduce using rule 20 (vacio -> .) ]

    parameters                     shift and go to state 100
    vacio                          shift and go to state 102

state 49

    (31) funcion -> FN MAIN LPAREN . parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> FN MAIN LPAREN . RPAREN LLLAVE programa RLLAVE
    (34) parameters -> . IDENTIFIER COLON asig_data_type
    (35) parameters -> . IDENTIFIER COLON asig_data_type COMMA parameters
    (36) parameters -> . vacio
    (20) vacio -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 104
    IDENTIFIER      shift and go to state 99

  ! RPAREN          [ reduce using rule 20 (vacio -> .) ]

    parameters                     shift and go to state 103
    vacio                          shift and go to state 102

state 50

    (37) ingreso_datos -> STD DOUBLE_COLON IO . DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOUBLE_COLON    shift and go to state 105


state 51

    (63) arreglos -> LCORCH valores RCORCH .

    SEMICOLON       reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    COMMA           reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    PLUS            reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    MINUS           reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    TIMES           reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    DIVIDE          reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    MOD             reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    INTD            reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    RCORCH          reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    EQ              reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    NEQ             reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    GEQ             reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    LEQ             reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    RIGHTARROW      reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    LEFTARROW       reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    RPAREN          reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    LLLAVE          reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    AND             reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)
    OR              reduce using rule 63 (arreglos -> LCORCH valores RCORCH .)


state 52

    (65) valores -> valor COMMA . valores
    (64) valores -> . valor
    (65) valores -> . valor COMMA valores
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 32
    valores                        shift and go to state 106
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 53

    (72) operacion -> valor PLUS . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 107
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 54

    (73) operacion -> valor MINUS . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 108
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 55

    (74) operacion -> valor TIMES . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 109
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 56

    (75) operacion -> valor DIVIDE . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 110
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 57

    (76) operacion -> valor MOD . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 111
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 58

    (77) operacion -> valor INTD . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 112
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 59

    (78) indexacion -> IDENTIFIER LCORCH . INTEGER RCORCH

    INTEGER         shift and go to state 113


state 60

    (70) condicional -> IF comparacion LLLAVE . programa RLLAVE
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 114
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 61

    (68) proposicion -> comparacion conector . proposicion
    (68) proposicion -> . comparacion conector proposicion
    (69) proposicion -> . comparacion
    (7) comparacion -> . valor EQ valor
    (8) comparacion -> . valor NEQ valor
    (9) comparacion -> . valor GEQ valor
    (10) comparacion -> . valor LEQ valor
    (11) comparacion -> . valor RIGHTARROW valor
    (12) comparacion -> . valor LEFTARROW valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    comparacion                    shift and go to state 115
    proposicion                    shift and go to state 116
    valor                          shift and go to state 42
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 62

    (66) conector -> AND .

    INTEGER         reduce using rule 66 (conector -> AND .)
    FLOAT           reduce using rule 66 (conector -> AND .)
    IDENTIFIER      reduce using rule 66 (conector -> AND .)
    STRING          reduce using rule 66 (conector -> AND .)
    LCORCH          reduce using rule 66 (conector -> AND .)


state 63

    (67) conector -> OR .

    INTEGER         reduce using rule 67 (conector -> OR .)
    FLOAT           reduce using rule 67 (conector -> OR .)
    IDENTIFIER      reduce using rule 67 (conector -> OR .)
    STRING          reduce using rule 67 (conector -> OR .)
    LCORCH          reduce using rule 67 (conector -> OR .)


state 64

    (71) condicional -> IF proposicion LLLAVE . programa RLLAVE
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 117
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 65

    (7) comparacion -> valor EQ . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 118
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 66

    (8) comparacion -> valor NEQ . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 119
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 67

    (9) comparacion -> valor GEQ . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 120
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 68

    (10) comparacion -> valor LEQ . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 121
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 69

    (11) comparacion -> valor RIGHTARROW . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 122
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 70

    (12) comparacion -> valor LEFTARROW . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 123
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 71

    (3) asignacion -> LET IDENTIFIER ASIG valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    SEMICOLON       reduce using rule 3 (asignacion -> LET IDENTIFIER ASIG valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 72

    (5) asignacion -> LET IDENTIFIER COLON asig_data_type . ASIG valor

    ASIG            shift and go to state 124


state 73

    (38) asig_data_type -> data_type .

    ASIG            reduce using rule 38 (asig_data_type -> data_type .)
    COMMA           reduce using rule 38 (asig_data_type -> data_type .)
    RPAREN          reduce using rule 38 (asig_data_type -> data_type .)


state 74

    (39) asig_data_type -> LPAREN . some_data_type RPAREN
    (60) some_data_type -> . data_type
    (61) some_data_type -> . data_type COMMA some_data_type
    (41) data_type -> . CHAR
    (42) data_type -> . signed_integer
    (43) data_type -> . unsigned_integer
    (44) data_type -> . float_type
    (45) data_type -> . BOOL
    (46) signed_integer -> . I8
    (47) signed_integer -> . I16
    (48) signed_integer -> . I32
    (49) signed_integer -> . I64
    (50) signed_integer -> . I128
    (51) signed_integer -> . ISIZE
    (52) unsigned_integer -> . U8
    (53) unsigned_integer -> . U16
    (54) unsigned_integer -> . U32
    (55) unsigned_integer -> . U64
    (56) unsigned_integer -> . U128
    (57) unsigned_integer -> . USIZE
    (58) float_type -> . F32
    (59) float_type -> . F64

    CHAR            shift and go to state 76
    BOOL            shift and go to state 80
    I8              shift and go to state 81
    I16             shift and go to state 82
    I32             shift and go to state 83
    I64             shift and go to state 84
    I128            shift and go to state 85
    ISIZE           shift and go to state 86
    U8              shift and go to state 87
    U16             shift and go to state 88
    U32             shift and go to state 89
    U64             shift and go to state 90
    U128            shift and go to state 91
    USIZE           shift and go to state 92
    F32             shift and go to state 93
    F64             shift and go to state 94

    some_data_type                 shift and go to state 125
    data_type                      shift and go to state 126
    signed_integer                 shift and go to state 77
    unsigned_integer               shift and go to state 78
    float_type                     shift and go to state 79

state 75

    (40) asig_data_type -> LCORCH . some_data_type RCORCH
    (60) some_data_type -> . data_type
    (61) some_data_type -> . data_type COMMA some_data_type
    (41) data_type -> . CHAR
    (42) data_type -> . signed_integer
    (43) data_type -> . unsigned_integer
    (44) data_type -> . float_type
    (45) data_type -> . BOOL
    (46) signed_integer -> . I8
    (47) signed_integer -> . I16
    (48) signed_integer -> . I32
    (49) signed_integer -> . I64
    (50) signed_integer -> . I128
    (51) signed_integer -> . ISIZE
    (52) unsigned_integer -> . U8
    (53) unsigned_integer -> . U16
    (54) unsigned_integer -> . U32
    (55) unsigned_integer -> . U64
    (56) unsigned_integer -> . U128
    (57) unsigned_integer -> . USIZE
    (58) float_type -> . F32
    (59) float_type -> . F64

    CHAR            shift and go to state 76
    BOOL            shift and go to state 80
    I8              shift and go to state 81
    I16             shift and go to state 82
    I32             shift and go to state 83
    I64             shift and go to state 84
    I128            shift and go to state 85
    ISIZE           shift and go to state 86
    U8              shift and go to state 87
    U16             shift and go to state 88
    U32             shift and go to state 89
    U64             shift and go to state 90
    U128            shift and go to state 91
    USIZE           shift and go to state 92
    F32             shift and go to state 93
    F64             shift and go to state 94

    some_data_type                 shift and go to state 127
    data_type                      shift and go to state 126
    signed_integer                 shift and go to state 77
    unsigned_integer               shift and go to state 78
    float_type                     shift and go to state 79

state 76

    (41) data_type -> CHAR .

    ASIG            reduce using rule 41 (data_type -> CHAR .)
    COMMA           reduce using rule 41 (data_type -> CHAR .)
    RPAREN          reduce using rule 41 (data_type -> CHAR .)
    RCORCH          reduce using rule 41 (data_type -> CHAR .)


state 77

    (42) data_type -> signed_integer .

    ASIG            reduce using rule 42 (data_type -> signed_integer .)
    COMMA           reduce using rule 42 (data_type -> signed_integer .)
    RPAREN          reduce using rule 42 (data_type -> signed_integer .)
    RCORCH          reduce using rule 42 (data_type -> signed_integer .)


state 78

    (43) data_type -> unsigned_integer .

    ASIG            reduce using rule 43 (data_type -> unsigned_integer .)
    COMMA           reduce using rule 43 (data_type -> unsigned_integer .)
    RPAREN          reduce using rule 43 (data_type -> unsigned_integer .)
    RCORCH          reduce using rule 43 (data_type -> unsigned_integer .)


state 79

    (44) data_type -> float_type .

    ASIG            reduce using rule 44 (data_type -> float_type .)
    COMMA           reduce using rule 44 (data_type -> float_type .)
    RPAREN          reduce using rule 44 (data_type -> float_type .)
    RCORCH          reduce using rule 44 (data_type -> float_type .)


state 80

    (45) data_type -> BOOL .

    ASIG            reduce using rule 45 (data_type -> BOOL .)
    COMMA           reduce using rule 45 (data_type -> BOOL .)
    RPAREN          reduce using rule 45 (data_type -> BOOL .)
    RCORCH          reduce using rule 45 (data_type -> BOOL .)


state 81

    (46) signed_integer -> I8 .

    ASIG            reduce using rule 46 (signed_integer -> I8 .)
    COMMA           reduce using rule 46 (signed_integer -> I8 .)
    RPAREN          reduce using rule 46 (signed_integer -> I8 .)
    RCORCH          reduce using rule 46 (signed_integer -> I8 .)


state 82

    (47) signed_integer -> I16 .

    ASIG            reduce using rule 47 (signed_integer -> I16 .)
    COMMA           reduce using rule 47 (signed_integer -> I16 .)
    RPAREN          reduce using rule 47 (signed_integer -> I16 .)
    RCORCH          reduce using rule 47 (signed_integer -> I16 .)


state 83

    (48) signed_integer -> I32 .

    ASIG            reduce using rule 48 (signed_integer -> I32 .)
    COMMA           reduce using rule 48 (signed_integer -> I32 .)
    RPAREN          reduce using rule 48 (signed_integer -> I32 .)
    RCORCH          reduce using rule 48 (signed_integer -> I32 .)


state 84

    (49) signed_integer -> I64 .

    ASIG            reduce using rule 49 (signed_integer -> I64 .)
    COMMA           reduce using rule 49 (signed_integer -> I64 .)
    RPAREN          reduce using rule 49 (signed_integer -> I64 .)
    RCORCH          reduce using rule 49 (signed_integer -> I64 .)


state 85

    (50) signed_integer -> I128 .

    ASIG            reduce using rule 50 (signed_integer -> I128 .)
    COMMA           reduce using rule 50 (signed_integer -> I128 .)
    RPAREN          reduce using rule 50 (signed_integer -> I128 .)
    RCORCH          reduce using rule 50 (signed_integer -> I128 .)


state 86

    (51) signed_integer -> ISIZE .

    ASIG            reduce using rule 51 (signed_integer -> ISIZE .)
    COMMA           reduce using rule 51 (signed_integer -> ISIZE .)
    RPAREN          reduce using rule 51 (signed_integer -> ISIZE .)
    RCORCH          reduce using rule 51 (signed_integer -> ISIZE .)


state 87

    (52) unsigned_integer -> U8 .

    ASIG            reduce using rule 52 (unsigned_integer -> U8 .)
    COMMA           reduce using rule 52 (unsigned_integer -> U8 .)
    RPAREN          reduce using rule 52 (unsigned_integer -> U8 .)
    RCORCH          reduce using rule 52 (unsigned_integer -> U8 .)


state 88

    (53) unsigned_integer -> U16 .

    ASIG            reduce using rule 53 (unsigned_integer -> U16 .)
    COMMA           reduce using rule 53 (unsigned_integer -> U16 .)
    RPAREN          reduce using rule 53 (unsigned_integer -> U16 .)
    RCORCH          reduce using rule 53 (unsigned_integer -> U16 .)


state 89

    (54) unsigned_integer -> U32 .

    ASIG            reduce using rule 54 (unsigned_integer -> U32 .)
    COMMA           reduce using rule 54 (unsigned_integer -> U32 .)
    RPAREN          reduce using rule 54 (unsigned_integer -> U32 .)
    RCORCH          reduce using rule 54 (unsigned_integer -> U32 .)


state 90

    (55) unsigned_integer -> U64 .

    ASIG            reduce using rule 55 (unsigned_integer -> U64 .)
    COMMA           reduce using rule 55 (unsigned_integer -> U64 .)
    RPAREN          reduce using rule 55 (unsigned_integer -> U64 .)
    RCORCH          reduce using rule 55 (unsigned_integer -> U64 .)


state 91

    (56) unsigned_integer -> U128 .

    ASIG            reduce using rule 56 (unsigned_integer -> U128 .)
    COMMA           reduce using rule 56 (unsigned_integer -> U128 .)
    RPAREN          reduce using rule 56 (unsigned_integer -> U128 .)
    RCORCH          reduce using rule 56 (unsigned_integer -> U128 .)


state 92

    (57) unsigned_integer -> USIZE .

    ASIG            reduce using rule 57 (unsigned_integer -> USIZE .)
    COMMA           reduce using rule 57 (unsigned_integer -> USIZE .)
    RPAREN          reduce using rule 57 (unsigned_integer -> USIZE .)
    RCORCH          reduce using rule 57 (unsigned_integer -> USIZE .)


state 93

    (58) float_type -> F32 .

    ASIG            reduce using rule 58 (float_type -> F32 .)
    COMMA           reduce using rule 58 (float_type -> F32 .)
    RPAREN          reduce using rule 58 (float_type -> F32 .)
    RCORCH          reduce using rule 58 (float_type -> F32 .)


state 94

    (59) float_type -> F64 .

    ASIG            reduce using rule 59 (float_type -> F64 .)
    COMMA           reduce using rule 59 (float_type -> F64 .)
    RPAREN          reduce using rule 59 (float_type -> F64 .)
    RCORCH          reduce using rule 59 (float_type -> F64 .)


state 95

    (4) asignacion -> LET MUT IDENTIFIER ASIG . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 128
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 96

    (6) asignacion -> LET MUT IDENTIFIER COLON . asig_data_type ASIG valor
    (38) asig_data_type -> . data_type
    (39) asig_data_type -> . LPAREN some_data_type RPAREN
    (40) asig_data_type -> . LCORCH some_data_type RCORCH
    (41) data_type -> . CHAR
    (42) data_type -> . signed_integer
    (43) data_type -> . unsigned_integer
    (44) data_type -> . float_type
    (45) data_type -> . BOOL
    (46) signed_integer -> . I8
    (47) signed_integer -> . I16
    (48) signed_integer -> . I32
    (49) signed_integer -> . I64
    (50) signed_integer -> . I128
    (51) signed_integer -> . ISIZE
    (52) unsigned_integer -> . U8
    (53) unsigned_integer -> . U16
    (54) unsigned_integer -> . U32
    (55) unsigned_integer -> . U64
    (56) unsigned_integer -> . U128
    (57) unsigned_integer -> . USIZE
    (58) float_type -> . F32
    (59) float_type -> . F64

    LPAREN          shift and go to state 74
    LCORCH          shift and go to state 75
    CHAR            shift and go to state 76
    BOOL            shift and go to state 80
    I8              shift and go to state 81
    I16             shift and go to state 82
    I32             shift and go to state 83
    I64             shift and go to state 84
    I128            shift and go to state 85
    ISIZE           shift and go to state 86
    U8              shift and go to state 87
    U16             shift and go to state 88
    U32             shift and go to state 89
    U64             shift and go to state 90
    U128            shift and go to state 91
    USIZE           shift and go to state 92
    F32             shift and go to state 93
    F64             shift and go to state 94

    asig_data_type                 shift and go to state 129
    data_type                      shift and go to state 73
    signed_integer                 shift and go to state 77
    unsigned_integer               shift and go to state 78
    float_type                     shift and go to state 79

state 97

    (79) llamada -> IDENTIFIER LPAREN valores RPAREN .

    SEMICOLON       reduce using rule 79 (llamada -> IDENTIFIER LPAREN valores RPAREN .)


state 98

    (28) impresion -> PRINTLN EXCLAMATION LPAREN valor . RPAREN
    (29) impresion -> PRINTLN EXCLAMATION LPAREN valor . COMMA valores RPAREN
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 131
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 99

    (34) parameters -> IDENTIFIER . COLON asig_data_type
    (35) parameters -> IDENTIFIER . COLON asig_data_type COMMA parameters

    COLON           shift and go to state 132


state 100

    (30) funcion -> FN IDENTIFIER LPAREN parameters . RPAREN LLLAVE programa RLLAVE

    RPAREN          shift and go to state 133


state 101

    (33) funcion -> FN IDENTIFIER LPAREN RPAREN . LLLAVE programa RLLAVE

    LLLAVE          shift and go to state 134


state 102

    (36) parameters -> vacio .

    RPAREN          reduce using rule 36 (parameters -> vacio .)


state 103

    (31) funcion -> FN MAIN LPAREN parameters . RPAREN LLLAVE programa RLLAVE

    RPAREN          shift and go to state 135


state 104

    (32) funcion -> FN MAIN LPAREN RPAREN . LLLAVE programa RLLAVE

    LLLAVE          shift and go to state 136


state 105

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON . DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOT             shift and go to state 137


state 106

    (65) valores -> valor COMMA valores .

    RCORCH          reduce using rule 65 (valores -> valor COMMA valores .)
    RPAREN          reduce using rule 65 (valores -> valor COMMA valores .)


state 107

    (72) operacion -> valor PLUS valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTD resolved as shift
    COMMA           reduce using rule 72 (operacion -> valor PLUS valor .)
    RCORCH          reduce using rule 72 (operacion -> valor PLUS valor .)
    EQ              reduce using rule 72 (operacion -> valor PLUS valor .)
    NEQ             reduce using rule 72 (operacion -> valor PLUS valor .)
    GEQ             reduce using rule 72 (operacion -> valor PLUS valor .)
    LEQ             reduce using rule 72 (operacion -> valor PLUS valor .)
    RIGHTARROW      reduce using rule 72 (operacion -> valor PLUS valor .)
    LEFTARROW       reduce using rule 72 (operacion -> valor PLUS valor .)
    RPAREN          reduce using rule 72 (operacion -> valor PLUS valor .)
    SEMICOLON       reduce using rule 72 (operacion -> valor PLUS valor .)
    LLLAVE          reduce using rule 72 (operacion -> valor PLUS valor .)
    AND             reduce using rule 72 (operacion -> valor PLUS valor .)
    OR              reduce using rule 72 (operacion -> valor PLUS valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58

  ! PLUS            [ reduce using rule 72 (operacion -> valor PLUS valor .) ]
  ! MINUS           [ reduce using rule 72 (operacion -> valor PLUS valor .) ]
  ! TIMES           [ reduce using rule 72 (operacion -> valor PLUS valor .) ]
  ! DIVIDE          [ reduce using rule 72 (operacion -> valor PLUS valor .) ]
  ! MOD             [ reduce using rule 72 (operacion -> valor PLUS valor .) ]
  ! INTD            [ reduce using rule 72 (operacion -> valor PLUS valor .) ]


state 108

    (73) operacion -> valor MINUS valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTD resolved as shift
    COMMA           reduce using rule 73 (operacion -> valor MINUS valor .)
    RCORCH          reduce using rule 73 (operacion -> valor MINUS valor .)
    EQ              reduce using rule 73 (operacion -> valor MINUS valor .)
    NEQ             reduce using rule 73 (operacion -> valor MINUS valor .)
    GEQ             reduce using rule 73 (operacion -> valor MINUS valor .)
    LEQ             reduce using rule 73 (operacion -> valor MINUS valor .)
    RIGHTARROW      reduce using rule 73 (operacion -> valor MINUS valor .)
    LEFTARROW       reduce using rule 73 (operacion -> valor MINUS valor .)
    RPAREN          reduce using rule 73 (operacion -> valor MINUS valor .)
    SEMICOLON       reduce using rule 73 (operacion -> valor MINUS valor .)
    LLLAVE          reduce using rule 73 (operacion -> valor MINUS valor .)
    AND             reduce using rule 73 (operacion -> valor MINUS valor .)
    OR              reduce using rule 73 (operacion -> valor MINUS valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58

  ! PLUS            [ reduce using rule 73 (operacion -> valor MINUS valor .) ]
  ! MINUS           [ reduce using rule 73 (operacion -> valor MINUS valor .) ]
  ! TIMES           [ reduce using rule 73 (operacion -> valor MINUS valor .) ]
  ! DIVIDE          [ reduce using rule 73 (operacion -> valor MINUS valor .) ]
  ! MOD             [ reduce using rule 73 (operacion -> valor MINUS valor .) ]
  ! INTD            [ reduce using rule 73 (operacion -> valor MINUS valor .) ]


state 109

    (74) operacion -> valor TIMES valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTD resolved as shift
    COMMA           reduce using rule 74 (operacion -> valor TIMES valor .)
    RCORCH          reduce using rule 74 (operacion -> valor TIMES valor .)
    EQ              reduce using rule 74 (operacion -> valor TIMES valor .)
    NEQ             reduce using rule 74 (operacion -> valor TIMES valor .)
    GEQ             reduce using rule 74 (operacion -> valor TIMES valor .)
    LEQ             reduce using rule 74 (operacion -> valor TIMES valor .)
    RIGHTARROW      reduce using rule 74 (operacion -> valor TIMES valor .)
    LEFTARROW       reduce using rule 74 (operacion -> valor TIMES valor .)
    RPAREN          reduce using rule 74 (operacion -> valor TIMES valor .)
    SEMICOLON       reduce using rule 74 (operacion -> valor TIMES valor .)
    LLLAVE          reduce using rule 74 (operacion -> valor TIMES valor .)
    AND             reduce using rule 74 (operacion -> valor TIMES valor .)
    OR              reduce using rule 74 (operacion -> valor TIMES valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58

  ! PLUS            [ reduce using rule 74 (operacion -> valor TIMES valor .) ]
  ! MINUS           [ reduce using rule 74 (operacion -> valor TIMES valor .) ]
  ! TIMES           [ reduce using rule 74 (operacion -> valor TIMES valor .) ]
  ! DIVIDE          [ reduce using rule 74 (operacion -> valor TIMES valor .) ]
  ! MOD             [ reduce using rule 74 (operacion -> valor TIMES valor .) ]
  ! INTD            [ reduce using rule 74 (operacion -> valor TIMES valor .) ]


state 110

    (75) operacion -> valor DIVIDE valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTD resolved as shift
    COMMA           reduce using rule 75 (operacion -> valor DIVIDE valor .)
    RCORCH          reduce using rule 75 (operacion -> valor DIVIDE valor .)
    EQ              reduce using rule 75 (operacion -> valor DIVIDE valor .)
    NEQ             reduce using rule 75 (operacion -> valor DIVIDE valor .)
    GEQ             reduce using rule 75 (operacion -> valor DIVIDE valor .)
    LEQ             reduce using rule 75 (operacion -> valor DIVIDE valor .)
    RIGHTARROW      reduce using rule 75 (operacion -> valor DIVIDE valor .)
    LEFTARROW       reduce using rule 75 (operacion -> valor DIVIDE valor .)
    RPAREN          reduce using rule 75 (operacion -> valor DIVIDE valor .)
    SEMICOLON       reduce using rule 75 (operacion -> valor DIVIDE valor .)
    LLLAVE          reduce using rule 75 (operacion -> valor DIVIDE valor .)
    AND             reduce using rule 75 (operacion -> valor DIVIDE valor .)
    OR              reduce using rule 75 (operacion -> valor DIVIDE valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58

  ! PLUS            [ reduce using rule 75 (operacion -> valor DIVIDE valor .) ]
  ! MINUS           [ reduce using rule 75 (operacion -> valor DIVIDE valor .) ]
  ! TIMES           [ reduce using rule 75 (operacion -> valor DIVIDE valor .) ]
  ! DIVIDE          [ reduce using rule 75 (operacion -> valor DIVIDE valor .) ]
  ! MOD             [ reduce using rule 75 (operacion -> valor DIVIDE valor .) ]
  ! INTD            [ reduce using rule 75 (operacion -> valor DIVIDE valor .) ]


state 111

    (76) operacion -> valor MOD valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTD resolved as shift
    COMMA           reduce using rule 76 (operacion -> valor MOD valor .)
    RCORCH          reduce using rule 76 (operacion -> valor MOD valor .)
    EQ              reduce using rule 76 (operacion -> valor MOD valor .)
    NEQ             reduce using rule 76 (operacion -> valor MOD valor .)
    GEQ             reduce using rule 76 (operacion -> valor MOD valor .)
    LEQ             reduce using rule 76 (operacion -> valor MOD valor .)
    RIGHTARROW      reduce using rule 76 (operacion -> valor MOD valor .)
    LEFTARROW       reduce using rule 76 (operacion -> valor MOD valor .)
    RPAREN          reduce using rule 76 (operacion -> valor MOD valor .)
    SEMICOLON       reduce using rule 76 (operacion -> valor MOD valor .)
    LLLAVE          reduce using rule 76 (operacion -> valor MOD valor .)
    AND             reduce using rule 76 (operacion -> valor MOD valor .)
    OR              reduce using rule 76 (operacion -> valor MOD valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58

  ! PLUS            [ reduce using rule 76 (operacion -> valor MOD valor .) ]
  ! MINUS           [ reduce using rule 76 (operacion -> valor MOD valor .) ]
  ! TIMES           [ reduce using rule 76 (operacion -> valor MOD valor .) ]
  ! DIVIDE          [ reduce using rule 76 (operacion -> valor MOD valor .) ]
  ! MOD             [ reduce using rule 76 (operacion -> valor MOD valor .) ]
  ! INTD            [ reduce using rule 76 (operacion -> valor MOD valor .) ]


state 112

    (77) operacion -> valor INTD valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTD resolved as shift
    COMMA           reduce using rule 77 (operacion -> valor INTD valor .)
    RCORCH          reduce using rule 77 (operacion -> valor INTD valor .)
    EQ              reduce using rule 77 (operacion -> valor INTD valor .)
    NEQ             reduce using rule 77 (operacion -> valor INTD valor .)
    GEQ             reduce using rule 77 (operacion -> valor INTD valor .)
    LEQ             reduce using rule 77 (operacion -> valor INTD valor .)
    RIGHTARROW      reduce using rule 77 (operacion -> valor INTD valor .)
    LEFTARROW       reduce using rule 77 (operacion -> valor INTD valor .)
    RPAREN          reduce using rule 77 (operacion -> valor INTD valor .)
    SEMICOLON       reduce using rule 77 (operacion -> valor INTD valor .)
    LLLAVE          reduce using rule 77 (operacion -> valor INTD valor .)
    AND             reduce using rule 77 (operacion -> valor INTD valor .)
    OR              reduce using rule 77 (operacion -> valor INTD valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58

  ! PLUS            [ reduce using rule 77 (operacion -> valor INTD valor .) ]
  ! MINUS           [ reduce using rule 77 (operacion -> valor INTD valor .) ]
  ! TIMES           [ reduce using rule 77 (operacion -> valor INTD valor .) ]
  ! DIVIDE          [ reduce using rule 77 (operacion -> valor INTD valor .) ]
  ! MOD             [ reduce using rule 77 (operacion -> valor INTD valor .) ]
  ! INTD            [ reduce using rule 77 (operacion -> valor INTD valor .) ]


state 113

    (78) indexacion -> IDENTIFIER LCORCH INTEGER . RCORCH

    RCORCH          shift and go to state 138


state 114

    (70) condicional -> IF comparacion LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 139


state 115

    (68) proposicion -> comparacion . conector proposicion
    (69) proposicion -> comparacion .
    (66) conector -> . AND
    (67) conector -> . OR

    LLLAVE          reduce using rule 69 (proposicion -> comparacion .)
    AND             shift and go to state 62
    OR              shift and go to state 63

    conector                       shift and go to state 61

state 116

    (68) proposicion -> comparacion conector proposicion .

    LLLAVE          reduce using rule 68 (proposicion -> comparacion conector proposicion .)


state 117

    (71) condicional -> IF proposicion LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 140


state 118

    (7) comparacion -> valor EQ valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    LLLAVE          reduce using rule 7 (comparacion -> valor EQ valor .)
    AND             reduce using rule 7 (comparacion -> valor EQ valor .)
    OR              reduce using rule 7 (comparacion -> valor EQ valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 119

    (8) comparacion -> valor NEQ valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    LLLAVE          reduce using rule 8 (comparacion -> valor NEQ valor .)
    AND             reduce using rule 8 (comparacion -> valor NEQ valor .)
    OR              reduce using rule 8 (comparacion -> valor NEQ valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 120

    (9) comparacion -> valor GEQ valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    LLLAVE          reduce using rule 9 (comparacion -> valor GEQ valor .)
    AND             reduce using rule 9 (comparacion -> valor GEQ valor .)
    OR              reduce using rule 9 (comparacion -> valor GEQ valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 121

    (10) comparacion -> valor LEQ valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    LLLAVE          reduce using rule 10 (comparacion -> valor LEQ valor .)
    AND             reduce using rule 10 (comparacion -> valor LEQ valor .)
    OR              reduce using rule 10 (comparacion -> valor LEQ valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 122

    (11) comparacion -> valor RIGHTARROW valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    LLLAVE          reduce using rule 11 (comparacion -> valor RIGHTARROW valor .)
    AND             reduce using rule 11 (comparacion -> valor RIGHTARROW valor .)
    OR              reduce using rule 11 (comparacion -> valor RIGHTARROW valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 123

    (12) comparacion -> valor LEFTARROW valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    LLLAVE          reduce using rule 12 (comparacion -> valor LEFTARROW valor .)
    AND             reduce using rule 12 (comparacion -> valor LEFTARROW valor .)
    OR              reduce using rule 12 (comparacion -> valor LEFTARROW valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 124

    (5) asignacion -> LET IDENTIFIER COLON asig_data_type ASIG . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 141
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 125

    (39) asig_data_type -> LPAREN some_data_type . RPAREN

    RPAREN          shift and go to state 142


state 126

    (60) some_data_type -> data_type .
    (61) some_data_type -> data_type . COMMA some_data_type

    RPAREN          reduce using rule 60 (some_data_type -> data_type .)
    RCORCH          reduce using rule 60 (some_data_type -> data_type .)
    COMMA           shift and go to state 143


state 127

    (40) asig_data_type -> LCORCH some_data_type . RCORCH

    RCORCH          shift and go to state 144


state 128

    (4) asignacion -> LET MUT IDENTIFIER ASIG valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    SEMICOLON       reduce using rule 4 (asignacion -> LET MUT IDENTIFIER ASIG valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 129

    (6) asignacion -> LET MUT IDENTIFIER COLON asig_data_type . ASIG valor

    ASIG            shift and go to state 145


state 130

    (28) impresion -> PRINTLN EXCLAMATION LPAREN valor RPAREN .

    SEMICOLON       reduce using rule 28 (impresion -> PRINTLN EXCLAMATION LPAREN valor RPAREN .)


state 131

    (29) impresion -> PRINTLN EXCLAMATION LPAREN valor COMMA . valores RPAREN
    (64) valores -> . valor
    (65) valores -> . valor COMMA valores
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 32
    valores                        shift and go to state 146
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 132

    (34) parameters -> IDENTIFIER COLON . asig_data_type
    (35) parameters -> IDENTIFIER COLON . asig_data_type COMMA parameters
    (38) asig_data_type -> . data_type
    (39) asig_data_type -> . LPAREN some_data_type RPAREN
    (40) asig_data_type -> . LCORCH some_data_type RCORCH
    (41) data_type -> . CHAR
    (42) data_type -> . signed_integer
    (43) data_type -> . unsigned_integer
    (44) data_type -> . float_type
    (45) data_type -> . BOOL
    (46) signed_integer -> . I8
    (47) signed_integer -> . I16
    (48) signed_integer -> . I32
    (49) signed_integer -> . I64
    (50) signed_integer -> . I128
    (51) signed_integer -> . ISIZE
    (52) unsigned_integer -> . U8
    (53) unsigned_integer -> . U16
    (54) unsigned_integer -> . U32
    (55) unsigned_integer -> . U64
    (56) unsigned_integer -> . U128
    (57) unsigned_integer -> . USIZE
    (58) float_type -> . F32
    (59) float_type -> . F64

    LPAREN          shift and go to state 74
    LCORCH          shift and go to state 75
    CHAR            shift and go to state 76
    BOOL            shift and go to state 80
    I8              shift and go to state 81
    I16             shift and go to state 82
    I32             shift and go to state 83
    I64             shift and go to state 84
    I128            shift and go to state 85
    ISIZE           shift and go to state 86
    U8              shift and go to state 87
    U16             shift and go to state 88
    U32             shift and go to state 89
    U64             shift and go to state 90
    U128            shift and go to state 91
    USIZE           shift and go to state 92
    F32             shift and go to state 93
    F64             shift and go to state 94

    asig_data_type                 shift and go to state 147
    data_type                      shift and go to state 73
    signed_integer                 shift and go to state 77
    unsigned_integer               shift and go to state 78
    float_type                     shift and go to state 79

state 133

    (30) funcion -> FN IDENTIFIER LPAREN parameters RPAREN . LLLAVE programa RLLAVE

    LLLAVE          shift and go to state 148


state 134

    (33) funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE . programa RLLAVE
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 149
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 135

    (31) funcion -> FN MAIN LPAREN parameters RPAREN . LLLAVE programa RLLAVE

    LLLAVE          shift and go to state 150


state 136

    (32) funcion -> FN MAIN LPAREN RPAREN LLLAVE . programa RLLAVE
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 151
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 137

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT . STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    STDIN           shift and go to state 152


state 138

    (78) indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .

    COMMA           reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    PLUS            reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    MINUS           reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    TIMES           reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    DIVIDE          reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    MOD             reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    INTD            reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    RCORCH          reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    EQ              reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    NEQ             reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    GEQ             reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    LEQ             reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    RIGHTARROW      reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    LEFTARROW       reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    RPAREN          reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    SEMICOLON       reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    LLLAVE          reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    AND             reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)
    OR              reduce using rule 78 (indexacion -> IDENTIFIER LCORCH INTEGER RCORCH .)


state 139

    (70) condicional -> IF comparacion LLLAVE programa RLLAVE .

    LET             reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    FN              reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    STD             reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    IDENTIFIER      reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    IF              reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    $end            reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)
    RLLAVE          reduce using rule 70 (condicional -> IF comparacion LLLAVE programa RLLAVE .)


state 140

    (71) condicional -> IF proposicion LLLAVE programa RLLAVE .

    LET             reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    FN              reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    STD             reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    IDENTIFIER      reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    IF              reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    $end            reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)
    RLLAVE          reduce using rule 71 (condicional -> IF proposicion LLLAVE programa RLLAVE .)


state 141

    (5) asignacion -> LET IDENTIFIER COLON asig_data_type ASIG valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    SEMICOLON       reduce using rule 5 (asignacion -> LET IDENTIFIER COLON asig_data_type ASIG valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 142

    (39) asig_data_type -> LPAREN some_data_type RPAREN .

    ASIG            reduce using rule 39 (asig_data_type -> LPAREN some_data_type RPAREN .)
    COMMA           reduce using rule 39 (asig_data_type -> LPAREN some_data_type RPAREN .)
    RPAREN          reduce using rule 39 (asig_data_type -> LPAREN some_data_type RPAREN .)


state 143

    (61) some_data_type -> data_type COMMA . some_data_type
    (60) some_data_type -> . data_type
    (61) some_data_type -> . data_type COMMA some_data_type
    (41) data_type -> . CHAR
    (42) data_type -> . signed_integer
    (43) data_type -> . unsigned_integer
    (44) data_type -> . float_type
    (45) data_type -> . BOOL
    (46) signed_integer -> . I8
    (47) signed_integer -> . I16
    (48) signed_integer -> . I32
    (49) signed_integer -> . I64
    (50) signed_integer -> . I128
    (51) signed_integer -> . ISIZE
    (52) unsigned_integer -> . U8
    (53) unsigned_integer -> . U16
    (54) unsigned_integer -> . U32
    (55) unsigned_integer -> . U64
    (56) unsigned_integer -> . U128
    (57) unsigned_integer -> . USIZE
    (58) float_type -> . F32
    (59) float_type -> . F64

    CHAR            shift and go to state 76
    BOOL            shift and go to state 80
    I8              shift and go to state 81
    I16             shift and go to state 82
    I32             shift and go to state 83
    I64             shift and go to state 84
    I128            shift and go to state 85
    ISIZE           shift and go to state 86
    U8              shift and go to state 87
    U16             shift and go to state 88
    U32             shift and go to state 89
    U64             shift and go to state 90
    U128            shift and go to state 91
    USIZE           shift and go to state 92
    F32             shift and go to state 93
    F64             shift and go to state 94

    data_type                      shift and go to state 126
    some_data_type                 shift and go to state 153
    signed_integer                 shift and go to state 77
    unsigned_integer               shift and go to state 78
    float_type                     shift and go to state 79

state 144

    (40) asig_data_type -> LCORCH some_data_type RCORCH .

    ASIG            reduce using rule 40 (asig_data_type -> LCORCH some_data_type RCORCH .)
    COMMA           reduce using rule 40 (asig_data_type -> LCORCH some_data_type RCORCH .)
    RPAREN          reduce using rule 40 (asig_data_type -> LCORCH some_data_type RCORCH .)


state 145

    (6) asignacion -> LET MUT IDENTIFIER COLON asig_data_type ASIG . valor
    (13) valor -> . INTEGER
    (14) valor -> . FLOAT
    (15) valor -> . IDENTIFIER
    (16) valor -> . operacion
    (17) valor -> . indexacion
    (18) valor -> . arreglos
    (19) valor -> . STRING
    (72) operacion -> . valor PLUS valor
    (73) operacion -> . valor MINUS valor
    (74) operacion -> . valor TIMES valor
    (75) operacion -> . valor DIVIDE valor
    (76) operacion -> . valor MOD valor
    (77) operacion -> . valor INTD valor
    (78) indexacion -> . IDENTIFIER LCORCH INTEGER RCORCH
    (63) arreglos -> . LCORCH valores RCORCH

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    IDENTIFIER      shift and go to state 35
    STRING          shift and go to state 39
    LCORCH          shift and go to state 15

    valor                          shift and go to state 154
    operacion                      shift and go to state 36
    indexacion                     shift and go to state 37
    arreglos                       shift and go to state 38

state 146

    (29) impresion -> PRINTLN EXCLAMATION LPAREN valor COMMA valores . RPAREN

    RPAREN          shift and go to state 155


state 147

    (34) parameters -> IDENTIFIER COLON asig_data_type .
    (35) parameters -> IDENTIFIER COLON asig_data_type . COMMA parameters

    RPAREN          reduce using rule 34 (parameters -> IDENTIFIER COLON asig_data_type .)
    COMMA           shift and go to state 156


state 148

    (30) funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE . programa RLLAVE
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 157
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 149

    (33) funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 158


state 150

    (31) funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE . programa RLLAVE
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (21) sentencias -> . asignacion SEMICOLON
    (22) sentencias -> . impresion SEMICOLON
    (23) sentencias -> . funcion
    (24) sentencias -> . ingreso_datos SEMICOLON
    (25) sentencias -> . arreglos SEMICOLON
    (26) sentencias -> . control_structure
    (27) sentencias -> . llamada SEMICOLON
    (3) asignacion -> . LET IDENTIFIER ASIG valor
    (4) asignacion -> . LET MUT IDENTIFIER ASIG valor
    (5) asignacion -> . LET IDENTIFIER COLON asig_data_type ASIG valor
    (6) asignacion -> . LET MUT IDENTIFIER COLON asig_data_type ASIG valor
    (28) impresion -> . PRINTLN EXCLAMATION LPAREN valor RPAREN
    (29) impresion -> . PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN
    (30) funcion -> . FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (31) funcion -> . FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE
    (32) funcion -> . FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE
    (33) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (37) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (63) arreglos -> . LCORCH valores RCORCH
    (62) control_structure -> . condicional
    (79) llamada -> . IDENTIFIER LPAREN valores RPAREN
    (70) condicional -> . IF comparacion LLLAVE programa RLLAVE
    (71) condicional -> . IF proposicion LLLAVE programa RLLAVE

    LET             shift and go to state 10
    PRINTLN         shift and go to state 12
    FN              shift and go to state 13
    STD             shift and go to state 14
    LCORCH          shift and go to state 15
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 17

    programa                       shift and go to state 159
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7
    control_structure              shift and go to state 8
    llamada                        shift and go to state 9
    condicional                    shift and go to state 16

state 151

    (32) funcion -> FN MAIN LPAREN RPAREN LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 160


state 152

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN . LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    LPAREN          shift and go to state 161


state 153

    (61) some_data_type -> data_type COMMA some_data_type .

    RPAREN          reduce using rule 61 (some_data_type -> data_type COMMA some_data_type .)
    RCORCH          reduce using rule 61 (some_data_type -> data_type COMMA some_data_type .)


state 154

    (6) asignacion -> LET MUT IDENTIFIER COLON asig_data_type ASIG valor .
    (72) operacion -> valor . PLUS valor
    (73) operacion -> valor . MINUS valor
    (74) operacion -> valor . TIMES valor
    (75) operacion -> valor . DIVIDE valor
    (76) operacion -> valor . MOD valor
    (77) operacion -> valor . INTD valor

    SEMICOLON       reduce using rule 6 (asignacion -> LET MUT IDENTIFIER COLON asig_data_type ASIG valor .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    MOD             shift and go to state 57
    INTD            shift and go to state 58


state 155

    (29) impresion -> PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN .

    SEMICOLON       reduce using rule 29 (impresion -> PRINTLN EXCLAMATION LPAREN valor COMMA valores RPAREN .)


state 156

    (35) parameters -> IDENTIFIER COLON asig_data_type COMMA . parameters
    (34) parameters -> . IDENTIFIER COLON asig_data_type
    (35) parameters -> . IDENTIFIER COLON asig_data_type COMMA parameters
    (36) parameters -> . vacio
    (20) vacio -> .

    IDENTIFIER      shift and go to state 99
    RPAREN          reduce using rule 20 (vacio -> .)

    parameters                     shift and go to state 162
    vacio                          shift and go to state 102

state 157

    (30) funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 163


state 158

    (33) funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .

    LET             reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    FN              reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    STD             reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    IDENTIFIER      reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    IF              reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    $end            reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    RLLAVE          reduce using rule 33 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)


state 159

    (31) funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 164


state 160

    (32) funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .

    LET             reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    FN              reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    STD             reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    IDENTIFIER      reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    IF              reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    $end            reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)
    RLLAVE          reduce using rule 32 (funcion -> FN MAIN LPAREN RPAREN LLLAVE programa RLLAVE .)


state 161

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN . RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    RPAREN          shift and go to state 165


state 162

    (35) parameters -> IDENTIFIER COLON asig_data_type COMMA parameters .

    RPAREN          reduce using rule 35 (parameters -> IDENTIFIER COLON asig_data_type COMMA parameters .)


state 163

    (30) funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .

    LET             reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    FN              reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    STD             reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    IDENTIFIER      reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    IF              reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    $end            reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    RLLAVE          reduce using rule 30 (funcion -> FN IDENTIFIER LPAREN parameters RPAREN LLLAVE programa RLLAVE .)


state 164

    (31) funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .

    LET             reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    FN              reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    STD             reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    IDENTIFIER      reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    IF              reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    $end            reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)
    RLLAVE          reduce using rule 31 (funcion -> FN MAIN LPAREN parameters RPAREN LLLAVE programa RLLAVE .)


state 165

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN . DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOT             shift and go to state 166


state 166

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT . READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    READLINE        shift and go to state 167


state 167

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE . LPAREN REFERENCE MUT IDENTIFIER RPAREN

    LPAREN          shift and go to state 168


state 168

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN . REFERENCE MUT IDENTIFIER RPAREN

    REFERENCE       shift and go to state 169


state 169

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE . MUT IDENTIFIER RPAREN

    MUT             shift and go to state 170


state 170

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 171


state 171

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER . RPAREN

    RPAREN          shift and go to state 172


state 172

    (37) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .

    SEMICOLON       reduce using rule 37 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLLAVE in state 40 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for INTD in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD in state 108 resolved as shift
WARNING: shift/reduce conflict for INTD in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for INTD in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for INTD in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MOD in state 111 resolved as shift
WARNING: shift/reduce conflict for INTD in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for MOD in state 112 resolved as shift
WARNING: shift/reduce conflict for INTD in state 112 resolved as shift
