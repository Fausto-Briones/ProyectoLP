Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASIG
    BOOL
    CHAR
    COLON
    COMMA
    DIVIDE
    DOUBLE_QUOTATION_MARK
    ELSE
    EXCLAMATION
    F32
    F64
    FALSE
    FOR
    FROM
    GEQ
    I16
    I32
    I64
    I8
    IF
    IMPL
    IN
    INTD
    ISIZE
    LEFTARROW
    LEQ
    MAIN
    MATCH
    MINUS
    MOD
    NEQ
    NOT
    OR
    PLUS
    QUOTATION_MARK
    RAND
    RETURN
    RIGHTARROW
    SELF
    STR
    STRING
    STRUCT
    TIMES
    TRUE
    U128
    U16
    U32
    U64
    U8
    USIZE
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias SEMICOLON
Rule 2     programa -> sentencias programa
Rule 3     asignacion -> LET IDENTIFIER EQ valor
Rule 4     valor -> INTEGER
Rule 5     valor -> FLOAT
Rule 6     valor -> IDENTIFIER
Rule 7     sentencias -> asignacion
Rule 8     sentencias -> impresion
Rule 9     sentencias -> funcion
Rule 10    sentencias -> ingreso_datos
Rule 11    sentencias -> arreglos
Rule 12    impresion -> PRINTLN LPAREN valor RPAREN
Rule 13    funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
Rule 14    ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
Rule 15    arreglos -> LCORCH valor RCORCH

Terminals, with rules where they appear

AND                  : 
ASIG                 : 
BOOL                 : 
CHAR                 : 
COLON                : 
COMMA                : 
DIVIDE               : 
DOT                  : 14 14
DOUBLE_COLON         : 14 14
DOUBLE_QUOTATION_MARK : 
ELSE                 : 
EQ                   : 3
EXCLAMATION          : 
F32                  : 
F64                  : 
FALSE                : 
FLOAT                : 5
FN                   : 13
FOR                  : 
FROM                 : 
GEQ                  : 
I16                  : 
I32                  : 
I64                  : 
I8                   : 
IDENTIFIER           : 3 6 13 14
IF                   : 
IMPL                 : 
IN                   : 
INTD                 : 
INTEGER              : 4
IO                   : 14
ISIZE                : 
LCORCH               : 15
LEFTARROW            : 
LEQ                  : 
LET                  : 3
LLLAVE               : 13
LPAREN               : 12 13 14 14
MAIN                 : 
MATCH                : 
MINUS                : 
MOD                  : 
MUT                  : 14
NEQ                  : 
NOT                  : 
OR                   : 
PLUS                 : 
PRINTLN              : 12
QUOTATION_MARK       : 
RAND                 : 
RCORCH               : 15
READLINE             : 14
REFERENCE            : 14
RETURN               : 
RIGHTARROW           : 
RLLAVE               : 13
RPAREN               : 12 13 14 14
SELF                 : 
SEMICOLON            : 1
STD                  : 14
STDIN                : 14
STR                  : 
STRING               : 
STRUCT               : 
TIMES                : 
TRUE                 : 
U128                 : 
U16                  : 
U32                  : 
U64                  : 
U8                   : 
USIZE                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arreglos             : 11
asignacion           : 7
funcion              : 9
impresion            : 8
ingreso_datos        : 10
programa             : 2 13 0
sentencias           : 1 2
valor                : 3 12 15

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias SEMICOLON
    (2) programa -> . sentencias programa
    (7) sentencias -> . asignacion
    (8) sentencias -> . impresion
    (9) sentencias -> . funcion
    (10) sentencias -> . ingreso_datos
    (11) sentencias -> . arreglos
    (3) asignacion -> . LET IDENTIFIER EQ valor
    (12) impresion -> . PRINTLN LPAREN valor RPAREN
    (13) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (14) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (15) arreglos -> . LCORCH valor RCORCH

    LET             shift and go to state 8
    PRINTLN         shift and go to state 9
    FN              shift and go to state 10
    STD             shift and go to state 11
    LCORCH          shift and go to state 12

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias . SEMICOLON
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias SEMICOLON
    (2) programa -> . sentencias programa
    (7) sentencias -> . asignacion
    (8) sentencias -> . impresion
    (9) sentencias -> . funcion
    (10) sentencias -> . ingreso_datos
    (11) sentencias -> . arreglos
    (3) asignacion -> . LET IDENTIFIER EQ valor
    (12) impresion -> . PRINTLN LPAREN valor RPAREN
    (13) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (14) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (15) arreglos -> . LCORCH valor RCORCH

    SEMICOLON       shift and go to state 13
    LET             shift and go to state 8
    PRINTLN         shift and go to state 9
    FN              shift and go to state 10
    STD             shift and go to state 11
    LCORCH          shift and go to state 12

    sentencias                     shift and go to state 2
    programa                       shift and go to state 14
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7

state 3

    (7) sentencias -> asignacion .

    SEMICOLON       reduce using rule 7 (sentencias -> asignacion .)
    LET             reduce using rule 7 (sentencias -> asignacion .)
    PRINTLN         reduce using rule 7 (sentencias -> asignacion .)
    FN              reduce using rule 7 (sentencias -> asignacion .)
    STD             reduce using rule 7 (sentencias -> asignacion .)
    LCORCH          reduce using rule 7 (sentencias -> asignacion .)


state 4

    (8) sentencias -> impresion .

    SEMICOLON       reduce using rule 8 (sentencias -> impresion .)
    LET             reduce using rule 8 (sentencias -> impresion .)
    PRINTLN         reduce using rule 8 (sentencias -> impresion .)
    FN              reduce using rule 8 (sentencias -> impresion .)
    STD             reduce using rule 8 (sentencias -> impresion .)
    LCORCH          reduce using rule 8 (sentencias -> impresion .)


state 5

    (9) sentencias -> funcion .

    SEMICOLON       reduce using rule 9 (sentencias -> funcion .)
    LET             reduce using rule 9 (sentencias -> funcion .)
    PRINTLN         reduce using rule 9 (sentencias -> funcion .)
    FN              reduce using rule 9 (sentencias -> funcion .)
    STD             reduce using rule 9 (sentencias -> funcion .)
    LCORCH          reduce using rule 9 (sentencias -> funcion .)


state 6

    (10) sentencias -> ingreso_datos .

    SEMICOLON       reduce using rule 10 (sentencias -> ingreso_datos .)
    LET             reduce using rule 10 (sentencias -> ingreso_datos .)
    PRINTLN         reduce using rule 10 (sentencias -> ingreso_datos .)
    FN              reduce using rule 10 (sentencias -> ingreso_datos .)
    STD             reduce using rule 10 (sentencias -> ingreso_datos .)
    LCORCH          reduce using rule 10 (sentencias -> ingreso_datos .)


state 7

    (11) sentencias -> arreglos .

    SEMICOLON       reduce using rule 11 (sentencias -> arreglos .)
    LET             reduce using rule 11 (sentencias -> arreglos .)
    PRINTLN         reduce using rule 11 (sentencias -> arreglos .)
    FN              reduce using rule 11 (sentencias -> arreglos .)
    STD             reduce using rule 11 (sentencias -> arreglos .)
    LCORCH          reduce using rule 11 (sentencias -> arreglos .)


state 8

    (3) asignacion -> LET . IDENTIFIER EQ valor

    IDENTIFIER      shift and go to state 15


state 9

    (12) impresion -> PRINTLN . LPAREN valor RPAREN

    LPAREN          shift and go to state 16


state 10

    (13) funcion -> FN . IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE

    IDENTIFIER      shift and go to state 17


state 11

    (14) ingreso_datos -> STD . DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOUBLE_COLON    shift and go to state 18


state 12

    (15) arreglos -> LCORCH . valor RCORCH
    (4) valor -> . INTEGER
    (5) valor -> . FLOAT
    (6) valor -> . IDENTIFIER

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 22

    valor                          shift and go to state 19

state 13

    (1) programa -> sentencias SEMICOLON .

    $end            reduce using rule 1 (programa -> sentencias SEMICOLON .)
    RLLAVE          reduce using rule 1 (programa -> sentencias SEMICOLON .)


state 14

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)
    RLLAVE          reduce using rule 2 (programa -> sentencias programa .)


state 15

    (3) asignacion -> LET IDENTIFIER . EQ valor

    EQ              shift and go to state 23


state 16

    (12) impresion -> PRINTLN LPAREN . valor RPAREN
    (4) valor -> . INTEGER
    (5) valor -> . FLOAT
    (6) valor -> . IDENTIFIER

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 22

    valor                          shift and go to state 24

state 17

    (13) funcion -> FN IDENTIFIER . LPAREN RPAREN LLLAVE programa RLLAVE

    LPAREN          shift and go to state 25


state 18

    (14) ingreso_datos -> STD DOUBLE_COLON . IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    IO              shift and go to state 26


state 19

    (15) arreglos -> LCORCH valor . RCORCH

    RCORCH          shift and go to state 27


state 20

    (4) valor -> INTEGER .

    RCORCH          reduce using rule 4 (valor -> INTEGER .)
    RPAREN          reduce using rule 4 (valor -> INTEGER .)
    SEMICOLON       reduce using rule 4 (valor -> INTEGER .)
    LET             reduce using rule 4 (valor -> INTEGER .)
    PRINTLN         reduce using rule 4 (valor -> INTEGER .)
    FN              reduce using rule 4 (valor -> INTEGER .)
    STD             reduce using rule 4 (valor -> INTEGER .)
    LCORCH          reduce using rule 4 (valor -> INTEGER .)


state 21

    (5) valor -> FLOAT .

    RCORCH          reduce using rule 5 (valor -> FLOAT .)
    RPAREN          reduce using rule 5 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 5 (valor -> FLOAT .)
    LET             reduce using rule 5 (valor -> FLOAT .)
    PRINTLN         reduce using rule 5 (valor -> FLOAT .)
    FN              reduce using rule 5 (valor -> FLOAT .)
    STD             reduce using rule 5 (valor -> FLOAT .)
    LCORCH          reduce using rule 5 (valor -> FLOAT .)


state 22

    (6) valor -> IDENTIFIER .

    RCORCH          reduce using rule 6 (valor -> IDENTIFIER .)
    RPAREN          reduce using rule 6 (valor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 6 (valor -> IDENTIFIER .)
    LET             reduce using rule 6 (valor -> IDENTIFIER .)
    PRINTLN         reduce using rule 6 (valor -> IDENTIFIER .)
    FN              reduce using rule 6 (valor -> IDENTIFIER .)
    STD             reduce using rule 6 (valor -> IDENTIFIER .)
    LCORCH          reduce using rule 6 (valor -> IDENTIFIER .)


state 23

    (3) asignacion -> LET IDENTIFIER EQ . valor
    (4) valor -> . INTEGER
    (5) valor -> . FLOAT
    (6) valor -> . IDENTIFIER

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 22

    valor                          shift and go to state 28

state 24

    (12) impresion -> PRINTLN LPAREN valor . RPAREN

    RPAREN          shift and go to state 29


state 25

    (13) funcion -> FN IDENTIFIER LPAREN . RPAREN LLLAVE programa RLLAVE

    RPAREN          shift and go to state 30


state 26

    (14) ingreso_datos -> STD DOUBLE_COLON IO . DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOUBLE_COLON    shift and go to state 31


state 27

    (15) arreglos -> LCORCH valor RCORCH .

    SEMICOLON       reduce using rule 15 (arreglos -> LCORCH valor RCORCH .)
    LET             reduce using rule 15 (arreglos -> LCORCH valor RCORCH .)
    PRINTLN         reduce using rule 15 (arreglos -> LCORCH valor RCORCH .)
    FN              reduce using rule 15 (arreglos -> LCORCH valor RCORCH .)
    STD             reduce using rule 15 (arreglos -> LCORCH valor RCORCH .)
    LCORCH          reduce using rule 15 (arreglos -> LCORCH valor RCORCH .)


state 28

    (3) asignacion -> LET IDENTIFIER EQ valor .

    SEMICOLON       reduce using rule 3 (asignacion -> LET IDENTIFIER EQ valor .)
    LET             reduce using rule 3 (asignacion -> LET IDENTIFIER EQ valor .)
    PRINTLN         reduce using rule 3 (asignacion -> LET IDENTIFIER EQ valor .)
    FN              reduce using rule 3 (asignacion -> LET IDENTIFIER EQ valor .)
    STD             reduce using rule 3 (asignacion -> LET IDENTIFIER EQ valor .)
    LCORCH          reduce using rule 3 (asignacion -> LET IDENTIFIER EQ valor .)


state 29

    (12) impresion -> PRINTLN LPAREN valor RPAREN .

    SEMICOLON       reduce using rule 12 (impresion -> PRINTLN LPAREN valor RPAREN .)
    LET             reduce using rule 12 (impresion -> PRINTLN LPAREN valor RPAREN .)
    PRINTLN         reduce using rule 12 (impresion -> PRINTLN LPAREN valor RPAREN .)
    FN              reduce using rule 12 (impresion -> PRINTLN LPAREN valor RPAREN .)
    STD             reduce using rule 12 (impresion -> PRINTLN LPAREN valor RPAREN .)
    LCORCH          reduce using rule 12 (impresion -> PRINTLN LPAREN valor RPAREN .)


state 30

    (13) funcion -> FN IDENTIFIER LPAREN RPAREN . LLLAVE programa RLLAVE

    LLLAVE          shift and go to state 32


state 31

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON . DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOT             shift and go to state 33


state 32

    (13) funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE . programa RLLAVE
    (1) programa -> . sentencias SEMICOLON
    (2) programa -> . sentencias programa
    (7) sentencias -> . asignacion
    (8) sentencias -> . impresion
    (9) sentencias -> . funcion
    (10) sentencias -> . ingreso_datos
    (11) sentencias -> . arreglos
    (3) asignacion -> . LET IDENTIFIER EQ valor
    (12) impresion -> . PRINTLN LPAREN valor RPAREN
    (13) funcion -> . FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE
    (14) ingreso_datos -> . STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN
    (15) arreglos -> . LCORCH valor RCORCH

    LET             shift and go to state 8
    PRINTLN         shift and go to state 9
    FN              shift and go to state 10
    STD             shift and go to state 11
    LCORCH          shift and go to state 12

    programa                       shift and go to state 34
    sentencias                     shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    funcion                        shift and go to state 5
    ingreso_datos                  shift and go to state 6
    arreglos                       shift and go to state 7

state 33

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT . STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    STDIN           shift and go to state 35


state 34

    (13) funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa . RLLAVE

    RLLAVE          shift and go to state 36


state 35

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN . LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    LPAREN          shift and go to state 37


state 36

    (13) funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .

    SEMICOLON       reduce using rule 13 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    LET             reduce using rule 13 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    PRINTLN         reduce using rule 13 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    FN              reduce using rule 13 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    STD             reduce using rule 13 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)
    LCORCH          reduce using rule 13 (funcion -> FN IDENTIFIER LPAREN RPAREN LLLAVE programa RLLAVE .)


state 37

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN . RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    RPAREN          shift and go to state 38


state 38

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN . DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    DOT             shift and go to state 39


state 39

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT . READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN

    READLINE        shift and go to state 40


state 40

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE . LPAREN REFERENCE MUT IDENTIFIER RPAREN

    LPAREN          shift and go to state 41


state 41

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN . REFERENCE MUT IDENTIFIER RPAREN

    REFERENCE       shift and go to state 42


state 42

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE . MUT IDENTIFIER RPAREN

    MUT             shift and go to state 43


state 43

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 44


state 44

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER . RPAREN

    RPAREN          shift and go to state 45


state 45

    (14) ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .

    SEMICOLON       reduce using rule 14 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)
    LET             reduce using rule 14 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)
    PRINTLN         reduce using rule 14 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)
    FN              reduce using rule 14 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)
    STD             reduce using rule 14 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)
    LCORCH          reduce using rule 14 (ingreso_datos -> STD DOUBLE_COLON IO DOUBLE_COLON DOT STDIN LPAREN RPAREN DOT READLINE LPAREN REFERENCE MUT IDENTIFIER RPAREN .)

